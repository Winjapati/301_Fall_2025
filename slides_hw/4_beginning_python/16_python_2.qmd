---
title: "Computation for Linguists"
subtitle: "Beginning Python: Variables & Types"
date: "October 1, 2025"
author: "Dr. Andrew M. Byrd"
format:
  revealjs:
    css: header_shrink.css
    theme: beige
    slide-number: true
    center: true
    toc: true
    toc-title: "Plan for the Day"
    toc-depth: 1
editor: visual
---

# Review

-   What did you learn last time?

# Values and Variables

## The Plan

-   How to assign a value to a variable\
-   The kinds of basic value types there are\
-   Some basic operations for those values

------------------------------------------------------------------------

# Types of Values

Three basic kinds in Python: - **Numbers**\
- **Strings**\
- **Booleans (logical values)**

------------------------------------------------------------------------

# Numbers

Two types: - **int**: integers (no decimals)\
- **float**: floating point numbers (decimals)

Operators: - `x + y` (add)\
- `x - y` (subtract)\
- `x * y` (multiply)\
- `x / y` (divide)\
- `x ** y` (exponent)\
- `x % y` (modulus: remainder)\
- `x // y` (floor division)

------------------------------------------------------------------------

# Strings

If you type text without quotes:

``` python
Josef
# NameError
```

With quotes:

``` python
"Josef"
# 'Josef'
```

Assigning strings:

``` python
title = "Dr."
first_name = "Josef"
last_name = "Fruehwald"
```

Concatenate with `+`:

``` python
title + first_name + last_name
```

Or print nicely:

``` python
print(title, first_name, last_name)
```

------------------------------------------------------------------------

# Strings (cont.)

Escape quotes with `\`:

``` python
"I said, \"Hello!\""
```

Strings can contain almost any characters.

------------------------------------------------------------------------

# Boolean (Logical) Values

Only two: `True`, `False`.

Usually created by comparisons:

``` python
first_name == "Joseph"
# False
```

⚠️ Remember:\
- `=` is assignment\
- `==` is equality test

------------------------------------------------------------------------

# Comparison Operators

-   `==` exactly equal\
-   `>` greater than\
-   `>=` greater than or equal to\
-   `<` less than\
-   `<=` less than or equal to

------------------------------------------------------------------------

# Logical Operators

-   `not` flips a boolean\
-   `and` is true if **both** are true\
-   `or` is true if **at least one** is true

------------------------------------------------------------------------

# Truth Tables

**and** \| Input \| Output \| \|------------------\|--------\| \| True and True \| True \| \| True and False \| False \| \| False and False \| False \|

**or** \| Input \| Output \| \|-----------------\|--------\| \| True or True \| True \| \| True or False \| True \| \| False or False \| False \|

------------------------------------------------------------------------

# Examples

Check for Josef with “f” or “ph”:

``` python
(first_name == "Joseph") or (first_name == "Josef")
```

Check for Josef who is 37:

``` python
(first_name == "Josef") and (my_age == 37)
```
