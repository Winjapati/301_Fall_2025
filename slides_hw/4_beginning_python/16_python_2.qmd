---
title: "Computation for Linguists"
subtitle: "Beginning Python: Value Types"
date: "October 1, 2025"
author: "Dr. Andrew M. Byrd"
format:
  revealjs:
    css: header_shrink.css
    theme: beige
    slide-number: true
    center: true
    toc: true
    toc-title: "Plan for the Day"
    toc-depth: 1
editor: visual
---

# Review

-   What did you learn last time?

## 

- Running `python`:
  - Terminal
  - Stand-alone `.py` file
  - Quarto doc (`qmd`)

- Starter `python` skills:
  - `print()`
  - basic math (`+`, `-`)
  - assigning variables with `=`


# Value Types


## Three basic value types

1. **Numbers**
2. **Strings**
3. **Booleans (logical values)**

- You can check what something is using the `type()` function

# Numbers

Two types: 

- **int**: integers (no decimals)

``` python
num_1 = 1
type(num_1)
```

- **float**: floating point numbers (decimals)

``` python
num_2 = 1.5
type(num_2)
```

## Number Operators

We've seen two operators already: 

- `x + y` (add)\
- `x - y` (subtract)\

## Number Operators

Here are two more:

- `x * y` (multiply)\
- `x / y` (divide)\

## Operator Activity:

- Using `python`, compute the following equations:

1. 100 - 37
2. 4 x 80
3. 100 ÷ 25

## Number Operators

Operators: 

- `x ** y` (exponent)\

``` python
2 ** 2 == 2 * 2
```

## Number Operators

- `x % y` (modulus: remainder)\

``` python
10 % 3 == 1   # 3 goes into 10 three times, remainder 1
14 % 5 == 4   # 5 goes into 14 twice, remainder 4
```

- This is actually quite useful, as these shows us what are non-integers

## Number Operators

- `x // y` (floor division)

``` python
10 // 3   # 3  (3 goes into 10 three times, ignore remainder)
14 // 5   # 2  (5 goes into 14 two times, remainder dropped)
```

- This is a type of *rounding*

## Summing up New Operators

- 14 / 5   # 2.8 (normal division)
- 14 // 5  # 2   (floor division)
- 14 % 5   # 4   (remainder)


# Strings

If you type text without quotes:

``` python
Josef
# NameError
```

## Strings
With quotes:

``` python
"Josef"
# 'Josef'
```

## Strings
Assigning strings:

``` python
title = "Dr."
first_name = "Josef"
last_name = "Fruehwald"
```

## Strings
Concatenate with `+`:

``` python
title + first_name + last_name
```

## Strings
Or print nicely:

``` python
print(title, first_name, last_name)
```


## Strings

Escape quotes with `\`:

``` python
"I said, \"Hello!\""
```

Strings can contain almost any characters.


# Boolean (Logical) Values

Only two: `True`, `False`.

Usually created by comparisons:

``` python
first_name == "Joseph"
# False
```

⚠️ Remember:\
- `=` is assignment\
- `==` is equality test


# Comparison Operators

-   `==` exactly equal\
-   `>` greater than\
-   `>=` greater than or equal to\
-   `<` less than\
-   `<=` less than or equal to


# Logical Operators

-   `not` flips a boolean\
-   `and` is true if **both** are true\
-   `or` is true if **at least one** is true


# Truth Tables

**and** \| Input \| Output \| \|------------------\|--------\| \| True and True \| True \| \| True and False \| False \| \| False and False \| False \|

**or** \| Input \| Output \| \|-----------------\|--------\| \| True or True \| True \| \| True or False \| True \| \| False or False \| False \|


# Examples

Check for Josef with “f” or “ph”:

``` python
(first_name == "Joseph") or (first_name == "Josef")
```

Check for Josef who is 37:

``` python
(first_name == "Josef") and (my_age == 37)
```
