---
title: "Computation for Linguists"
subtitle: "Beginning Python: Value Types"
date: "October 1, 2025"
author: "Dr. Andrew M. Byrd"
format:
  revealjs:
    css: header_shrink.css
    theme: beige
    slide-number: true
    center: true
    toc: true
    toc-title: "Plan for the Day"
    toc-depth: 1
editor: visual
---

# Review

-   What did you learn last time?

## 

- Running `python`:
  - Terminal
  - Stand-alone `.py` file
  - Quarto doc (`qmd`)

- Starter `python` skills:
  - `print()`
  - basic math (`+`, `-`)
  - assigning variables with `=`


# Value Types


## Three basic value types

1. **Numbers**
2. **Strings**
3. **Booleans (logical values)**

- You can check what something is using the `type()` function

# Numbers

Two types: 

- **int**: integers (no decimals)

``` python
num_1 = 1
type(num_1)
```

- **float**: floating point numbers (decimals)

``` python
num_2 = 1.5
type(num_2)
```

## Number Operators

We've seen two operators already: 

- `x + y` (add)\
- `x - y` (subtract)\

## Number Operators

Here are two more:

- `x * y` (multiply)\
- `x / y` (divide)\

## Operator Activity:

- Using `python`, compute the following equations:

1. 100 - 37
2. 4 x 80
3. 100 ÷ 25

## Number Operators: Exponent

Operators: 

- `x ** y` (exponent)\

``` python
2 ** 2 == 2 * 2
```

## Number Operators: Modulus

- `x % y` (**modulus**: remainder)\

``` python
10 % 3 == 1   # 3 goes into 10 three times, remainder 1
14 % 5 == 4   # 5 goes into 14 twice, remainder 4
```

- This is actually quite useful, as these shows us what are non-integers

## Number Operators: FLoor Division

- `x // y` (floor division)

``` python
10 // 3   # 3  (3 goes into 10 three times, ignore remainder)
14 // 5   # 2  (5 goes into 14 two times, remainder dropped)
```

- This is a way of *rounding down*

## Summing up New Operators: 

``` python
14 / 5      # 2.8 (normal division)
14 // 5     # 2   (floor division)
14 % 5      # 4   (modulus)
```

## Operator Activity

# Strings

## Three basic value types

1. **Numbers**
2. **Strings**
3. **Booleans (logical values)**

- You can check what something is using the `type()` function

## Strings
If you type text without quotes:

``` python
Andrew
# NameError
```

## Strings
With quotes:

``` python
"Andrew"    # 'Andrew' also works
```

## Strings
Assigning strings:

``` python
title = "Dr."
first_name = "Andrew"
last_name = "Byrd"
```

## Strings
Concatenate with `+`:

``` python
title + first_name + last_name
```

- What happens when we print the three? How might we improve the output?


## Strings
We could also print it this way:

``` python
print(title, first_name, last_name)
```

## Strings

What happens when we run this code?

``` python
print("I said, "Hello!"")
```

## Strings

- For this, we'll need to have a character `\"`.
    - Cf. LaTeX `\#`, etc.

``` python
"I said, \"Hello!\""
```

- Besides `"` (and `'`), almost any character can be within a string.


# Boolean (Logical) Values

## Three basic value types

1. **Numbers**
2. **Strings**
3. **Booleans (logical values)**

- You can check what something is using the `type()` function


## Boolean (Logical) Values

Only two: `True`, `False`.

Usually created by comparisons:

``` python
first_name == "Bob"
# False
```

::: callout-important
## Important!

- `=` means **variable assignment**  
- `==` meanas **equals** or **testing if two things are equal**
:::


## Comparison Operators

-   `==` exactly equal\
-   `>` greater than\
-   `>=` greater than or equal to\
-   `<` less than\
-   `<=` less than or equal to


## Logical Operators

-   `not` flips a boolean\
-   `and` is true if **both** are true\
-   `or` is true if **at least one** is true


## Examples

Check for Andrew with “w” or without:

``` python
(first_name == "Andrew") or (first_name == "Andre")
```

Check for Andrew who is 46:

``` python
(first_name == "Andrew") and (my_age == 46)
```

# Activity

## Activity: Predicting Aspiration

- In English, voiceless stops (p, t, k) are usually aspirated when they occur at the beginning of a word.
- Your task: write a small Python script that predicts whether the first sound in a word will be aspirated.


## Activity: Predicting Aspiration

Steps:

1. Assign a word like "pin", "spin" to a variable called `word`.
    - To identify the first character, use `word[0]`. 
3. Create three variables: `starts_p`, `starts_t`, `starts_k`
    - `starts_p = word[0] == "p"`, etc.
3. Create another variable aspirated, whose value is `True` if any of the above is `True`.
    - **Hint**: combine them with `or`!
4. Print out the word and whether it is aspirated.


# Activity Answers

## Answers
``` python
word = "pin"   # try: "spin", "top", "stop", "cat", "skat"

# Step 1: check if word starts with a voiceless stop
starts_p = word[0] == "p"
starts_t = word[0] == "t"
starts_k = word[0] == "k"

# Step 2: decide aspiration (simplified: only if it’s the first sound)
aspirated = starts_p or starts_t or starts_k

print("Word:", word)
print("Aspirated?", aspirated)
```

# Improving the Activity

## But what if we want to test any word?

``` python
word = input("Enter a word, any word: ")

# Step 1: check if word starts with a voiceless stop
starts_p = word[0] == "p"
starts_t = word[0] == "t"
starts_k = word[0] == "k"

# Step 2: decide aspiration (simplified: only if it’s the first sound)
aspirated = starts_p or starts_t or starts_k

print("Word:", word)
print("Aspirated?", aspirated)
```


