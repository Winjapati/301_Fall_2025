{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Computation for Linguists\"\n",
        "subtitle: \"Beginning Python: For Loops\"\n",
        "date: \"October 8, 2025\"\n",
        "author: \"Dr. Andrew M. Byrd\"\n",
        "format:\n",
        "  revealjs:\n",
        "    css: header_shrink.css\n",
        "    theme: beige\n",
        "    slide-number: true\n",
        "    center: true\n",
        "    toc: true\n",
        "    toc-title: \"Plan for the Day\"\n",
        "    toc-depth: 1\n",
        "editor: visual\n",
        "---\n",
        "\n",
        "\n",
        "# Review\n",
        "\n",
        "-   What did you learn last time?\n",
        "\n",
        "## Recap from Last Time\n",
        "\n",
        "-   `if`\n",
        "-   `elif`\n",
        "-   `else`\n",
        "\n",
        "## Review Activity: Plural Generator\n",
        "\n",
        "-   Create a new `qmd`, create a new Python block\n",
        "-   Copy and paste the following code:\n",
        "\n",
        "``` python\n",
        "word = \"bʌs\"\n",
        "\n",
        "sibilants = [\"s\", \"z\", \"ʃ\", \"ʒ\", \"tʃ\", \"dʒ\"] \n",
        "voiceless = [\"p\", \"t\", \"k\", \"f\", \"θ\"]\n",
        "```\n",
        "\n",
        "## Review Activity: Plural Generator\n",
        "\n",
        "-   Write a conditional (`if`, `elif`, `else`) that:\n",
        "    -   Checks whether the last character of `word` is in the list of `sibilants`\n",
        "    -   If yes, create a new variable `plural` by adding \"ɪz\" to the word\n",
        "    -   If no, check whether it's in the list of `voiceless`.\n",
        "        -   If yes, set `plural` to the word + \"s\"\n",
        "    -   Otherwise, set `plural` to the word + \"z\"\n",
        "-   Print the plural form.\n",
        "\n",
        "# For Loops\n",
        "\n",
        "## Back to Brontë\n",
        "\n",
        "``` python\n",
        "charlotte = ['The Professor', 'Jane Eyre', 'Shirley', 'Villette']\n",
        "```\n",
        "\n",
        "-   How would we print up each member of this list? We could:\n",
        "\n",
        "``` python\n",
        "print(charlotte[0])\n",
        "print(charlotte[1])\n",
        "print(charlotte[2])\n",
        "print(charlotte[3])\n",
        "```\n",
        "\n",
        "## Back to Brontë\n",
        "\n",
        "-   But what if we don't know how many novels there are?\n",
        "-   We could use `len()`, which tells us the length of a string, list, etc.\n",
        "-   Try it:\n",
        "\n",
        "``` python\n",
        "print(len(charlotte))\n",
        "```\n",
        "\n",
        "## Back to Brontë\n",
        "\n",
        "-   How would this help us here?\n",
        "-   Well..\n",
        "\n",
        "``` python\n",
        "char_index = 0\n",
        "if char_index <= len(charlotte):\n",
        "    print(charlotte[char_index])\n",
        "    char_index += 1\n",
        "else:\n",
        "    ????\n",
        "```\n",
        "\n",
        "-   We have no way for us to **iterate** - to repeat the action over and over again\n",
        "    -   We need another way to go about this.\n",
        "\n",
        "## `if` Statements vs. `for` Loops\n",
        "\n",
        "-   `if` statements are used to control which pieces of code are run, depending on certain conditions\n",
        "-   `for` loops are used to run the same block of code over and over again on items in an iterable.\n",
        "\n",
        "## Back to Brontë\n",
        "\n",
        "``` python\n",
        "for title in charlotte: \n",
        "    print(title)\n",
        "```\n",
        "\n",
        "-   What is this code saying?\n",
        "\n",
        "## Back to Brontë\n",
        "\n",
        "``` python\n",
        "for book in charlotte: \n",
        "    print(book)\n",
        "```\n",
        "\n",
        "-   `title`, `book` are temporary (loop) variables\n",
        "\n",
        "## Temporary Variables\n",
        "\n",
        "-   The value of `book`, `title`, etc. persists after the loop is finished:\n",
        "\n",
        "``` python\n",
        "charlotte = ['The Professor', 'Jane Eyre', 'Shirley', 'Villette']\n",
        "for book in charlotte: \n",
        "    print(book)\n",
        "print(book)\n",
        "```\n",
        "\n",
        "## `for` Loops\n",
        "\n",
        "![By Dr. Josef Fruehwald](for_loop.gif){fig-alt=\"Dr. Fruehwald's awesome gif about `for` loops\" fig-align=\"center\"}\n",
        "\n",
        "<!-- ## `for` Loops -->\n",
        "\n",
        "<!-- book_counter = 0 -->\n",
        "\n",
        "<!-- for title in charlotte: book_counter = book_counter + 1 -->\n",
        "\n",
        "<!-- print(book_counter) \\# 4 Setting up an empty counter or a collector before starting a for loop is a very common thing to do. For example, if I wanted to know how many characters Charlotte Brontë used in the title of each book, and in total over all, I could do this: -->\n",
        "\n",
        "<!-- total_characters = 0 book_characters = \\[\\] -->\n",
        "\n",
        "<!-- for title in charlotte: \\# exclude spaces no_space = title.replace(\" \", \"\") -->\n",
        "\n",
        "## Activity: `for` loops\n",
        "\n",
        "Below is a list of five important terms in Linguistics:\n",
        "\n",
        "``` python\n",
        "words = [\"phoneme\", \"phrase\", \"morpheme\", \"reconstruction\", \"index\"]\n",
        "```\n",
        "\n",
        "**Your task**: Write a `for` loop that prints out:\n",
        "\n",
        "1.  the word\n",
        "2.  the length (`len()`, represented by x below) of each word in the\n",
        "\n",
        "Each should look like the following sentence:\n",
        "\n",
        "\"python has 6 letters.\"\n",
        "\n",
        "# Cleaning Text\n",
        "\n",
        "## Cleaning Text\n",
        "\n",
        "-   Let's now put our knowledge of conditionals and loops to work.\n",
        "-   This will help you as you work towards your final projects.\n",
        "-   We'll need to learn how to \"clean\" the data.\n",
        "\n",
        "## Verifying your Python directory\n",
        "\n",
        "-   First, run the following code:\n",
        "\n",
        "``` python\n",
        "import os\n",
        "print(os.getcwd())\n",
        "```\n",
        "\n",
        "-   This should tell you which directory you're in. You should be located in your LIN_301 directory, or whichever one this `qmd` doc is found in.\n",
        "\n",
        "## Downloading Using Python\n",
        "\n",
        "-   Next, we're going to download a new book from Project Gutenberg.\n",
        "-   To do so, run the following code:\n",
        "\n",
        "``` python\n",
        "import urllib.request\n",
        "\n",
        "url = \"https://www.gutenberg.org/files/141/141-0.txt\"  # Mansfield Park\n",
        "filename = \"mansfield_park.txt\"\n",
        "\n",
        "urllib.request.urlretrieve(url, filename)\n",
        "\n",
        "print(\"Downloaded:\", filename)\n",
        "```\n",
        "\n",
        "-   What does all of this say?\n",
        "\n",
        "## Opening up Files in Python\n",
        "\n",
        "- Let's now open up our file.\n",
        "\n",
        "``` python\n",
        "book_location = \"mansfield_park.txt\"\n",
        "book_file = open(book_location, mode = 'r')\n",
        "```\n",
        "\n",
        "- After running the above code, run the next block separately. What happens?\n",
        "\n",
        "``` python\n",
        "book_file.readline()\n",
        "```\n",
        "## Opening up Files in Python\n",
        "\n",
        "- We can create a list `book_lines`, that will contain all lines of the book.\n",
        "\n",
        "``` python\n",
        "book_lines = book_file.readlines()\n",
        "len(book_lines)\n",
        "```\n",
        "\n",
        "- If we want to print up lines individually, we can access it using the index.\n",
        "\n",
        "``` python\n",
        "book_lines[101]\n",
        "```\n",
        "\n",
        "## Cleaning Up the Book\n",
        "\n",
        "- Do you see how each line ends in `\\n`?  That's indicating a line break.\n",
        "\n",
        "```bash\n",
        "'Such were its immediate effects, and within a twelvemonth a more\\n'\n",
        "```\n",
        "\n",
        "- Let's get rid of that command.\n",
        "\n",
        "``` python\n",
        "one_line = book_lines[101]\n",
        "one_line.rstrip()\n",
        "```\n",
        "\n",
        "## Cleaning Up the Book\n",
        "\n",
        "- In other lines, we also see some unnecessary whitespace.\n"
      ],
      "id": "aafcfaae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "two_line = book_lines[12]\n",
        "two_line"
      ],
      "id": "cdaa7887",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "- Let's get rid of it, too.\n",
        "\n",
        "``` python\n",
        "two_line.rstrip().lstrip()\n",
        "```\n",
        "\n",
        "##\n",
        "\n",
        "``` python\n",
        "one_line.rstrip().lstrip().lower()\n",
        "```\n",
        "\n",
        "```         \n",
        "# Update total counter\n",
        "total_characters = total_characters + len(no_space)\n",
        "\n",
        "# update by-book list\n",
        "book_characters.append(len(no_space))\n",
        "```\n",
        "\n",
        "More examples: Preparing Lines In the previous module on reading in text, we went over how text often needs to be cleaned up before we can get ready to analyze it. Whitespace characters need to be stripped off of the left and right edges, and we need to convert each line into either lowercase or uppercase.\n",
        "\n",
        "## define the book path\n",
        "\n",
        "book_location = \"data/mansfield_park.txt\"\n",
        "\n",
        "## open the text file\n",
        "\n",
        "book_file = open(book_location, mode = 'r')\n",
        "\n",
        "## read in all lines\n",
        "\n",
        "book_lines = book_file.readlines()\n",
        "\n",
        "## get one line\n",
        "\n",
        "one_line = book_lines\\[200\\]\n",
        "\n",
        "## uncleaned line\n",
        "\n",
        "one_line 'ours, Sir Thomas, I may say, or at least of *yours*, would not grow up\\n'\n",
        "\n",
        "## cleaned line\n",
        "\n",
        "one_line.lstrip().rstrip().lower() \\# 'ours, sir thomas, i may say, or at least of *yours*, would not grow up' But, there are 16,045 total lines in Mansfield Park. It would be inefficient to do this to each line individually. Instead, we'll do it with a for loop with the following steps.\n",
        "\n",
        "Create an empty collector list. For each line in book_lines clean it up. Add the cleaned up line to the collector list. \\# collector clean_lines = \\[\\]\n",
        "\n",
        "for line in book_lines: \\# cleanup cleaned = line.lstrip().rstrip().lower()\n",
        "\n",
        "```         \n",
        "# collection\n",
        "clean_lines.append(cleaned)\n",
        "```\n",
        "\n",
        "More examples: Full Lines If you look at clean_lines, you'll see that there are a bunch of lines that are zero-length. They look like just ''. These were blank lines in the original text used for things like separating paragraphs. They're not all that important for our analysis, so we'll get rid of them by combining a for loop and an if statement. We'll do it with the following steps:\n",
        "\n",
        "Set up a counter, set to 0, to keep track of the number of blank lines Set up an empty collector list. Loop through every value in clean_lines, assigning it to line. If the length of the value in line is greater than 0, append it to the collector list. Otherwise, add 1 to n_blank. \\# a counter, just to see n_blank = 0\n",
        "\n",
        "## a collector\n",
        "\n",
        "full_lines = \\[\\]\n",
        "\n",
        "for line in clean_lines: if len(line) \\> 0: full_lines.append(line) else: n_blank = n_blank + 1 Doing this, we can see that there were 2,110 blank lines in the text, and now full_lines only contains lines with text!\n",
        "\n",
        "More examples: Lists of words! We also saw how to split up a line of text into a list of words with the .split() method. If we split a line into words by using spaces, it looks like this:\n",
        "\n",
        "full_lines\\[200\\] \\# 'on this point. whatever i can do, as you well know, \\# i am always ready'\n",
        "\n",
        "full_lines\\[200\\].split(\" \") \\# \\['on', \\# 'this', \\# 'point.', \\# 'whatever', \\# 'i', \\# 'can', \\# 'do,', \\# 'as', \\# 'you', \\# 'well', \\# 'know,', \\# 'i', \\# 'am', \\# 'always', \\# 'ready'\\] If we wanted to turn every line into a list of words, we could do this with a for loop with the following steps.\n",
        "\n",
        "Set up an empty collector list. Loop through every value in full_lines, assigning it to line. Split line into a list of words based on the spaces. Append this list of words to the collector list. \\# set up collector word_lists = \\[\\]\n",
        "\n",
        "for line in full_lines: \\# split on spaces words = line.split(\" \")\n",
        "\n",
        "```         \n",
        "# append to collector\n",
        "word_lists.append(words)\n",
        "```\n",
        "\n",
        "Now, word_lists is a list of lists.\n",
        "\n",
        "More Examples: Getting the average number of words per line If we wanted to know how many words there are per line, we'd need to get the total number of words, then divide it by the number of lines. I'll do this with a for loop with the following steps:\n",
        "\n",
        "Set up an empty collector list for the length of each list of words. Loop through all of the values in word_lists, assigning each value to the variable words. Append the length of words to the collector list. Get the sum of all values in the collector list with sum(). Divide that by the length of word_lists. \\# set up collector line_len = \\[\\]\n",
        "\n",
        "for words in word_lists: \\# get length of list n = len(words)\n",
        "\n",
        "```         \n",
        "# append to collector\n",
        "line_len.append(n)\n",
        "```\n",
        "\n",
        "total_words = sum(line_len) total_lines = len(word_lists)\n",
        "\n",
        "average_len = total_words / total_lines Turns out, the average number of words per line is 11.68 words.\n",
        "\n",
        "More Examples: How many \"the\" Sometimes, we may need to have a for loop inside of a for loop. Right now, word_lists is a list we can loop over, and every value in it is also a list we can loop over. One use case for embedding two for loops here would be if we wanted to count up how many instances of \"the\" there are in the book. Since the \"words\" in each list still have punctuation attached to them, we'll have to use some regular expressions.\n",
        "\n",
        "Create a counter for the number of \"the\", set to 0. Loop every value in word_lists, assigning it to words. Loop through every value in words, assigning it to w. If w is a match for the regular expression \\bthe\\b, add 1 to the counter. import re\n",
        "\n",
        "## Set up counter\n",
        "\n",
        "the_counter = 0 total_word_counter = 0\n",
        "\n",
        "for words in word_lists: for w in words: total_word_counter = total_word_counter + 1\n",
        "\n",
        "```         \n",
        "    if re.match(r'\\bthe\\b', w):\n",
        "        the_counter = the_counter + 1\n",
        "```\n",
        "\n",
        "It turns out that there are 6,340 instances of \"the\" in Mansfield Park. In order to get the proportion of all words which were \"the\", we just need to do the_counter / total_counter.\n",
        "\n",
        "# Activity Answers\n",
        "\n",
        "## Plural Generator\n",
        "\n",
        "``` python\n",
        "word = \"bʌs\"\n",
        "\n",
        "sibilants = [\"s\", \"z\", \"ʃ\", \"ʒ\", \"tʃ\", \"dʒ\"] \n",
        "voiceless = [\"p\", \"t\", \"k\", \"f\", \"θ\"]\n",
        "\n",
        "if word[-1] in sibilants:\n",
        "    plural = word + \"ɪz\" \n",
        "elif word[-1] in voiceless:\n",
        "    plural = word + \"s\" \n",
        "else: \n",
        "    plural = word + \"z\"\n",
        "\n",
        "print(\"Plural: \", plural)\n",
        "```\n",
        "\n",
        "## `for` loop Activity\n",
        "\n",
        "``` python\n",
        "words = [\"phoneme\", \"phrase\", \"morpheme\", \"reconstruction\", \"index\"]\n",
        "for wd in words:\n",
        "    print(wd, \" has \", len(wd), \" letters.\")\n",
        "```"
      ],
      "id": "71c946da"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\andre\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}