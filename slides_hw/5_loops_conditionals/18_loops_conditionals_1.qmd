---
title: "Computation for Linguists"
subtitle: "Beginning Python: Conditionals"
date: "October 6, 2025"
author: "Dr. Andrew M. Byrd"
format:
  revealjs:
    css: header_shrink.css
    theme: beige
    slide-number: true
    center: true
    toc: true
    toc-title: "Plan for the Day"
    toc-depth: 1
editor: visual
---

# Review

-   What did you learn last time?

## Recap from Last Week

-   Three Value Types: **Numbers**, **Strings**, **Boolean**
-   X
-   Y
-   Z

# Control Structures

## Loops & Conditionals = Control Structures

-   This is where programming languages truly become powerful
-   Control structures:
    -   control the flow of a program
    -   tell the program what to do next, and in what order
-   All programming languages have control structures, but they differ in how they're written out

## Loops & Conditionals = Control Structures

-   Loops:
    -   `for` loops: do this task for a set number of times or for each item in a sequence
    -   `while` loops: do this task as longer as a condition is true
-   Conditionals: check whether a condition is true; if so, execute the corresponding block of code
    -   `if`, `elif`, `else`

# Conditionals

## Conditional Example: Odd or Even?

-   Here are the operators we know:
    -   `+` : plus
    -   `-` : minus
    -   `*` : times
    -   `/` : divided by
    -   `**` : to the power of
    -   `//` : floor division
    -   `%` : modulus

## Conditional Example: Odd or Even?

-   Using `% 2`

``` python
100 % 2 \# 0
117 % 2 \# 1
```

## Conditional Example: Odd or Even?

-   Let's write a short block of code that will print `x` is even if true.
-   Let's assign x = 50 on its own line, then the `if` statement.

``` python
x = 50
if x % 2 == 0: print(x, "is even")      # 50 is even
```

-   Run this code in your Quarto doc!
-   Redefine `x = 51`.
    -   What happens when you rerun the `if` statement?

## Conditional Example: So What's Going On Here?

``` python
x = 50
if x % 2 == 0: print(x, "is even")      # 50 is even
```

-   We're making the logical statement `x % 2 == 0`.
    -   This statement is checking to see if the outcome of `x % 2` is exactly equal to `0`.
    -   If we run it as its own line of code, we'll get True.

``` python
x % 2       # 0
x % 2 == 0  # True 
```

## Conditional Example: So What's Going On Here?

``` python
x = 50
if x % 2 == 0: print(x, "is even")      # 50 is even
```

-   Let's look at the `if ...` part of the code:
    -   `if x % 2 == 0` means "should the the modulus of x with 2 equal" (i.e., should x be an even number
-   We then get `:`, followed by the command python will run if the `if` statement is `True`

## Conditionals: Proper Syntax

-   To generalize the syntax of an `if` statement:

``` python
if condition: command()     # if x is true, do y
```

-   We could also do:

``` python
if condition: 
    command()     # if x is true, do y
```

-   Note: the indent is **required**!
-   Indented `if` statements are more common, as they frequently involve multiple lines of code.

## Conditionals: Proper Syntax

-   Knowing when and when not to indent is important.
-   Take the following code block:

``` python
if x % 2 == 0: 
    print(x, "is even.") 
    print("This line only prints if it's even too.") 
print("This line prints no matter what.") 
```

-   Run this code where `x = 50`

## Conditionals: Proper Syntax

-   Now run this code where `x = 51`

``` python
if x % 2 == 0: 
    print(x, "is even.") 
    print("This line only prints if it's even too.") 
print("This line prints no matter what.") 
```

-   Why is `print("This line prints no matter what.")` not indented?
    -   What would happen if we did indent it?

## Python & Indentation

-   Through indentations, Python will define the scope of a control statement.
-   Lines of code with the same degree of indentation are controlled by the same control structures.
-   The greater the indentation, the narrower the scope of the code.

# `else` and `elif` Statements

## `else` Statements

-   Let's return to our original `if` statement.

``` python
if x % 2 == 0: 
    print(x, "is even.") 
    print("This line only prints if it's even too.") 
print("This line prints no matter what.") 
```

-   Right now, this code only prompts a command if a number is even.
    -   But what if we'd like it to also print a statement if the number were odd?

## `else` Statements

-   The `else` command:

``` python
if x % 2 == 0: 
    print(x, "is even") 
else: 
    print(x, "is odd") 
```
-   Run this code block, redefining the value of x.

## `elif` Statments

- There's one more *keyword** that we need to learn for our `if` statements.
- Currently our code identifies numbers as even or odd:

``` python
if x % 2 == 0: 
    print(x, "is even") 
else: 
    print(x, "is odd") 
```

- But what if the number is neither? 
    - What if the number is `50.1`?

## `elif` Statments

- Run the following code:

```python
x = 50.1
x % 2
```

- How might we capture forms that end in a decimal in Python?
  - Big hint: there are more **comparison operators** than just `==`!

## dd

50.1 divided by 2 has a remainder of 0.1. 0.1 is not equal to 0. 0.1 == 0 returns False, so we don't print anything yet. All the conditions above returned False, so it prints 50.1 is odd. This is not quite right. It seems like what we really want to do is have some kind of check first, to see if the value in x has a decimal value before we do the rest of our even and odd checks.

There are lots of little math tricks we could do to check to see if x has a decimal place, but I think what I'll want to do is check to see of remainder division returns a remainder that is greater than 0 and less than 1.

x = 50.1 x % 1 \> 0 and x % 1 \< 1 So, the start of our if block will start with this decimal check.

if x % 1 \> 0 and x % 1 \< 1: print(x, "is a decimal.") Now we're ready to run our even and odd checks that we worked out before, but we need to do so in a way that tells python that they belong to the same block of checks. We only want python to move on to the even and odd checks if the number is not a decimal. We do this with elif, which is a mashup of else and if. It only runs if the block above was False, and it does its own logical check before running its own code.

Our final block of code to classify numbers into even, odd, or decimals, is:

if x % 1 \> 0 and x % 1 \< 1: print(x, "is a decimal.") elif x % 2 == 0: print(x, "is even") else: print(x, "is odd") Go ahead and check it out with any given number.

elsif-1.svg

More example: Is item in list Let's say we wanted to identify which of the Brontë sisters wrote a particular novel. We'd first need to create a list of novels for each sister.

charlotte = \["The Professor", "Jane Eyre", "Shirley", "Villette"\] emily = \["Wuthering Heights"\] anne = \["Agnes Grey", "The Tenant of Wildfell Hall"\] Now, we can test novel titles against each list.

novel = "Jane Eyre" if novel in charlotte: print("Charlotte Brontë wrote", novel) elif novel in emily: print("Emily Brontë wrote", novel) elif novel in anne: print("Anne Brontë wote", novel) else: print(novel, "was not written by one of the Brontë sisters") More Examples: Counting If we complexify our Brontë checking code, we can also keep track of how many times we've checked whether a particular sister wrote a book. First, we need to initialize a dictionary that will keep track.

bronte_checks = {"charlotte": 0, "emily": 0, "anne" : 0} Now, we include a line of code in each part of the if block to increase the value in the dictionary by 1.

if novel in charlotte: bronte_checks\["charlotte"\] = bronte_checks\["charlotte"\] + 1 print("Charlotte Brontë wrote", novel) elif novel in emily: bronte_checks\["emily"\] = bronte_checks\["emily"\] + 1 print("Emily Brontë wrote", novel) elif novel in anne: bronte_checks\["anne"\] = bronte_checks\["anne"\] + 1 print("Anne Brontë wote", novel) else: print(novel, "was not written by one of the Brontë sisters")
