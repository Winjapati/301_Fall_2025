---
title: "Day 1 — From Strings to Tables"
subtitle: "Computation for Linguists • Review & Rebuild"
author: "Your Name"
format:
  revealjs:
    theme: simple
    slide-number: true
    toc: true
    toc-depth: 2
    code-tools: true
    incremental: false
execute:
  echo: true
  warning: false
  message: false
jupyter: python3
date: 2025-10-24
---

## Plan for the Day

- Big-picture pipeline: **strings → lists → dicts → DataFrames**
- Conversions among structures
- Quick summaries with pandas
- Short practice + exit ticket

---

## Warm-up (5 min)

**Question:** What's the difference between a **list** and a **dict**?  
- List = ordered sequence (index-based)  
- Dict = key → value mapping (label-based)

---

## Mini-Demo: From Lists to a DataFrame

```python
# Starter lists (phonology mini-set)
sounds = ["p", "t", "k", "b", "d", "g"]
manners = ["stop"] * 6
voicing = ["voiceless","voiceless","voiceless","voiced","voiced","voiced"]

# Combine into a dictionary of columns
sound_dict = {"Sound": sounds, "Manner": manners, "Voicing": voicing}

import pandas as pd
df = pd.DataFrame(sound_dict)
df
```

---

## Inspect & Summarize

```python
# Peek at the DataFrame
df.info()
df.head()
```

```python
# Simple summaries
df["Voicing"].value_counts()
df.groupby("Voicing").size()
```

---

## Guided Practice: Add Place of Articulation

- Add a `Place` column (e.g., "bilabial", "alveolar", "velar").  
- Use `.loc[]` to fix/update any rows.  
- Re-run summaries by `Voicing` **and** `Place`.

```python
# Example solution sketch (students can choose their own places)
df["Place"] = ["bilabial","alveolar","velar","bilabial","alveolar","velar"]

# Cross-tab
pd.crosstab(df["Voicing"], df["Place"])
```

---

## Conversions Refresher

```python
# DataFrame → dict (records)
records = df.to_dict(orient="records")
records[:2]
```

```python
# Dict of columns → DataFrame
new_df = pd.DataFrame({"Language": ["English","Hindi","Greek"],
                       "Family": ["Germanic","Indic","Hellenic"]})
new_df
```

---

## Applied Linguistics Reflection (10 min)

- Which data structure naturally fits:
  - raw **text**?
  - a phoneme **inventory**?
  - a bilingual **lexicon**?
  - a tidy **dataset** for analysis?

*(Discuss answers as a group.)*

---

## Exit Ticket (5 min)

1. Convert `["English","Hindi","Greek"]` to a dict mapping language → family.  
2. Name one operation that’s easier in a **DataFrame** than in a **dict**.

---

## Homework (short)

- Extend today's DataFrame with one more column of your choice (e.g., **Airstream** or **Allophony? (Y/N)**).  
- Export as CSV and bring it for Day 2.

```python
df.to_csv("day1_sounds.csv", index=False)
"Saved day1_sounds.csv"
```
