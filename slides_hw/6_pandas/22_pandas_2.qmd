---
title: "Computation for Linguists"
subtitle: "Beginning Python: More Tricks with Lists, While Loops"
date: "October 10, 2025"
author: "Dr. Andrew M. Byrd"
format:
  revealjs:
    css: header_shrink.css
    theme: beige
    slide-number: true
    center: true
    toc: true
    toc-title: "Plan for the Day"
    toc-depth: 1
jupyter: python3
editor: source
---

# Review

-   What did you learn last time?

## Recap from Last Time

-   Conditionals: `if` = 1 x
-   Loops: `for` = multiple times
-   Cleaning text with `.strip()`, `.lower()`

## Review Activity

-   Copy this list of messy words into your code, creating a list called `words`:

``` python
words = [" Cat\n", "dog", " BIRD ", "fish\n", "LION", "tiger ", "bear", "OWL\n"]
```

-   Write a `for` loop that goes through each word. Inside the loop:
    -   Use `.strip()` and `.lower()` to clean the word
    -   Save each result in a variable called `cleaned`
    -   Print each instance of `cleaned` in the loop.
    
    
# Day 2 — Filtering, Sorting, Combining

## Complex Filtering

```python
# Logical AND (&) and OR (|)
df[(df["family"]=="Indo-European") & (df["is_extinct"]==False)]
```

## Sorting

```python
df.sort_values(by="speakers_M", ascending=False)
df.sort_index()  # by row labels
```

## Combining Series Side-by-Side

```python
reflexes_verb = pd.Series(
    {"Latin": 8, "Greek": 10, "Sanskrit": 12, "Old English": 6}
)
reflexes_noun = pd.Series(
    {"Latin": 5, "Greek": 7, "Gothic": 4, "Old Church Slavonic": 3}
)

combined = pd.DataFrame({"verb": reflexes_verb, "noun": reflexes_noun})
combined
```

## Arithmetic with Alignment (fill missing)

```python
total = reflexes_verb.add(reflexes_noun, fill_value=0)
total.sort_values(ascending=False)
```

## Concatenation (Stacking)

```python
# Vertical stack (same columns)
latin_df = pd.DataFrame({"lang":["Latin","Latin"],"root":["fer-","port-"]})
greek_df = pd.DataFrame({"lang":["Greek"],"root":["phér-"]})
pd.concat([latin_df, greek_df], ignore_index=True)
```

## Handling Missing Data

```python
combined.isna().sum()
combined_filled = combined.fillna(0)
combined_dropped = combined.dropna()
```

## **Day 2 Activity — Compare Reflex Lists**

```python
# 1) Build the two Series (verb/noun) from above
# 2) Combine into one DF with columns verb, noun
# 3) Add a 'total' column = verb + noun (treat NaN as 0)
# 4) Sort by total descending, show top 5
```

---



