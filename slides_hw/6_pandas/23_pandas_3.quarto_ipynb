{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Computation for Linguists\"\n",
        "subtitle: \"Pandasmonium: Day 3\"\n",
        "date: \"October 17, 2025\"\n",
        "author: \"Dr. Andrew M. Byrd\"\n",
        "format:\n",
        "  revealjs:\n",
        "    css: header_shrink.css\n",
        "    theme: beige\n",
        "    slide-number: true\n",
        "    center: true\n",
        "    toc: true\n",
        "    toc-title: \"Plan for the Day\"\n",
        "    toc-depth: 1\n",
        "jupyter: python3\n",
        "editor: source\n",
        "---\n",
        "\n",
        "\n",
        "# Review\n",
        "\n",
        "-   What did you learn last time?\n",
        "\n",
        "## Recap from Last Time\n",
        "\n",
        "-   ddddddddd\n",
        "\n",
        "## Review Activity\n",
        "\n",
        "-   \n",
        "\n",
        "# Loading up `csv` and `xls` files\n",
        "\n",
        "## Reading / Writing Files\n",
        "\n",
        "```python\n",
        "# CSV\n",
        "ref_df.to_csv(\"reflexes_summary.csv\", index=False)\n",
        "loaded = pd.read_csv(\"reflexes_summary.csv\")\n",
        "loaded.head()\n",
        "\n",
        "# Excel (if needed)\n",
        "# ref_df.to_excel(\"reflexes_summary.xlsx\", index=False)\n",
        "# pd.read_excel(\"reflexes_summary.xlsx\")\n",
        "```\n",
        "\n",
        "## Quick Summaries\n",
        "\n",
        "```python\n",
        "df.describe(include=\"all\")\n",
        "df[\"family\"].value_counts()\n",
        "df[\"family\"].unique()\n",
        "```\n",
        "\n",
        "## Grouping & Aggregation\n",
        "\n",
        "```python\n",
        "# Example small reflex table for demo\n",
        "ref_df = pd.DataFrame({\n",
        "    \"Language\": [\"Latin\",\"Greek\",\"Sanskrit\",\"Gothic\",\"OCS\",\"Latin\"],\n",
        "    \"Family\":   [\"IE\",\"IE\",\"IE\",\"Germanic\",\"Slavic\",\"IE\"],\n",
        "    \"Reflexes\": [8,10,12,4,3,5]\n",
        "})\n",
        "\n",
        "ref_df.groupby(\"Family\")[\"Reflexes\"].sum()\n",
        "ref_df.groupby(\"Family\").agg(\n",
        "    total=(\"Reflexes\",\"sum\"),\n",
        "    mean=(\"Reflexes\",\"mean\"),\n",
        "    n=(\"Reflexes\",\"count\")\n",
        ")\n",
        "```\n",
        "\n",
        "\n",
        "## Quick Visualization (optional)\n",
        "\n",
        "```python\n",
        "# Simple bar plot (requires matplotlib to be present)\n",
        "counts = ref_df.groupby(\"Family\")[\"Reflexes\"].sum()\n",
        "ax = counts.plot(kind=\"bar\", title=\"Reflex Counts by Family\")\n",
        "ax.set_xlabel(\"Family\")\n",
        "ax.set_ylabel(\"Total Reflexes\")\n",
        "```\n",
        "\n",
        "> Note: In some environments you may need:\n",
        "> ```python\n",
        "> import matplotlib.pyplot as plt\n",
        "> plt.show()\n",
        "> ```\n",
        "\n",
        "## **Day 3 Activity — From Rows to Insight**\n",
        "\n",
        "Using `ref_df` (or your own small table):\n",
        "\n",
        "1. Group by `Family` and compute: total reflexes, mean reflexes, and count.\n",
        "2. Sort families by total reflexes (descending).\n",
        "3. Save the grouped summary to `family_reflexes.csv`.\n",
        "4. Make a bar plot of total reflexes by family.\n",
        "\n",
        "```python\n",
        "summary = (ref_df\n",
        "    .groupby(\"Family\")[\"Reflexes\"]\n",
        "    .agg(total=\"sum\", mean=\"mean\", n=\"count\")\n",
        "    .sort_values(by=\"total\", ascending=False)\n",
        ")\n",
        "summary\n",
        "summary.to_csv(\"family_reflexes.csv\")\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "# Appendix — Quick Reference\n",
        "\n",
        "## Selection Cheatsheet\n",
        "\n",
        "- **Columns:** `df[\"col\"]`, `df[[\"col1\",\"col2\"]]`\n",
        "- **Rows (position):** `df.iloc[0]`, `df.iloc[1:3]`\n",
        "- **Rows (label):** `df.loc[\"a\"]`, `df.loc[\"a\":\"c\"]`\n",
        "- **Cell:** `df.loc[\"a\",\"col\"]` or `df.iloc[0, 1]`\n",
        "- **Filter:** `df[df[\"col\"] == value]`, `df[(cond1) & (cond2)]`\n",
        "\n",
        "## Common Ops\n",
        "\n",
        "```python\n",
        "df.rename(columns={\"old\":\"new\"})\n",
        "df.drop(columns=[\"col\"])\n",
        "df.set_index(\"col\")\n",
        "df.reset_index(drop=True)\n",
        "df.sort_values(by=\"col\", ascending=False)\n",
        "df.isna().sum()\n",
        "df.fillna(0)\n",
        "```\n",
        "\n",
        "## Alignment & Combining\n",
        "\n",
        "```python\n",
        "s1.add(s2, fill_value=0)\n",
        "pd.concat([df1, df2], axis=0, ignore_index=True)  # vertical\n",
        "pd.concat([s1, s2], axis=1)                       # side-by-side\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Final Tips\n",
        "\n",
        "- Keep indices simple early on; reset with `reset_index(drop=True)` if confused.\n",
        "- Prefer unique column names and (eventually) a unique index.\n",
        "- Build intuition with *small*, *visible* examples before loading big CSVs.\n",
        "\n",
        "\n",
        "## Cleaning Data in Pandas\n",
        "\n",
        "### Why Clean?\n",
        "- Real data is messy.  \n",
        "- Clean data means:\n",
        "  - Consistent structure  \n",
        "  - Clear column names  \n",
        "  - No missing, duplicated, or mis-typed values  \n",
        "\n",
        "---\n",
        "\n",
        "## Cleaning **Before** You Build a DataFrame\n",
        "\n",
        "> “If it looks messy in your list or dictionary, pandas will just mirror that mess.”\n",
        "\n",
        "## Common Pre-DF Fixes\n",
        "| Goal | Example |\n",
        "|------|----------|\n",
        "| Remove whitespace / newlines | `\" word\\n\".strip()` |\n",
        "| Standardize capitalization | `\"Word\".lower()` |\n",
        "| Remove punctuation | `re.sub(r\"[^\\w\\s]\", \"\", text)` |\n",
        "| Split text into tokens | `text.split()` |\n",
        "| Validate list/dict lengths | `len(list)`, `list(zip(...))` |\n",
        "| Handle placeholders | Replace `\"NA\"`, `\"None\"` with `None` |\n",
        "\n",
        "🧠 *Use basic Python + regex for text cleaning.*\n",
        "\n",
        "---\n",
        "\n",
        "## Cleaning **Within** the DataFrame\n",
        "\n",
        "> “Once it’s a table, use pandas tools to fix the structure.”\n",
        "\n",
        "## Useful Methods\n",
        "| Task | Example |\n",
        "|------|----------|\n",
        "| Inspect structure | `df.info()`, `df.shape`, `df.columns` |\n",
        "| Rename columns | `df.rename(columns={\"old\":\"new\"})` |\n",
        "| Drop columns or rows | `df.drop(columns=[\"col\"])`, `df.dropna()` |\n",
        "| Fill / replace values | `df.fillna(\"Unknown\")`, `df.replace(\"?\", None)` |\n",
        "| Remove duplicates | `df.drop_duplicates()` |\n",
        "| Convert data types | `df[\"col\"] = df[\"col\"].astype(int)` |\n",
        "| String cleanup | `df[\"col\"] = df[\"col\"].str.strip().str.lower()` |\n",
        "| Compute new columns | `df[\"new\"] = df[\"col1\"] + df[\"col2\"]` |\n",
        "| Sort and reset | `df.sort_values([\"col\"])`, `df.reset_index(drop=True)` |\n",
        "\n",
        "---\n",
        "\n",
        "## 🧩 A Mental Model\n",
        "\n",
        "| Phase | Mindset | Tools |\n",
        "|-------|----------|-------|\n",
        "| **Before** | Clean the input | String methods, lists, dicts, `re` |\n",
        "| **Inside DF** | Clean the structure | `.rename()`, `.dropna()`, `.astype()` |\n",
        "| **After** | Analyze and summarize | `.loc`, `.sum()`, `.mean()`, `.groupby()` |\n",
        "\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## 🧭 Ten Core Methods to Remember\n",
        "\n",
        "1. `df.info()` – check structure  \n",
        "2. `df.columns` – list columns  \n",
        "3. `df.rename()` – fix column names  \n",
        "4. `df.dropna()` / `df.fillna()` – handle missing data  \n",
        "5. `df.drop_duplicates()` – remove repeats  \n",
        "6. `df.astype()` – convert data type  \n",
        "7. `df[\"col\"].str.lower()` – text cleanup  \n",
        "8. `df.replace()` – fix placeholders  \n",
        "9. `df.sort_values()` – organize  \n",
        "10. `df.reset_index()` – tidy indices after filtering  \n",
        "\n",
        "---\n",
        "\n",
        "## Key Takeaway\n",
        "\n",
        "> Python cleans **strings** and **lists**.  \n",
        "> Pandas cleans **tables**.\n",
        "\n",
        "\n",
        "\n",
        "# What You Can Do Now 🧠\n",
        "\n",
        "## Linguistic Tasks Now Possible with Pandas\n",
        "\n",
        "- ✅ **Build structured lexica**\n",
        "  - Create and modify DataFrames of words, glosses, and languages\n",
        "  - Filter or sort them instantly (no more manual loops)\n",
        "\n",
        "- ✅ **Compare data across sources**\n",
        "  - Merge two datasets (e.g., LIV + IEW)\n",
        "  - Identify missing reflexes or mismatched glosses automatically\n",
        "\n",
        "## Linguistic Tasks Now Possible with Pandas\n",
        "\n",
        "- ✅ **Quantify linguistic patterns**\n",
        "  - Count how many reflexes each family has per root\n",
        "  - Measure which morphological types are most frequent\n",
        "\n",
        "- ✅ **Clean and normalize datasets**\n",
        "  - Capitalize, strip, or standardize glosses and forms\n",
        "  - Fill in missing data (`NaN → 0`) and rename columns in bulk\n",
        "\n",
        "## Linguistic Tasks Now Possible with Pandas\n",
        "\n",
        "- ✅ **Group and summarize**\n",
        "  - Group by family, POS, or semantic field\n",
        "  - Compute totals, averages, or frequencies per category\n",
        "\n",
        "- ✅ **Visualize and export**\n",
        "  - Create quick bar charts of linguistic statistics\n",
        "  - Save clean CSVs for use in R, Excel, or later analysis\n",
        "\n",
        "---\n",
        "\n",
        "## The Big Shift\n",
        "\n",
        "| Old Approach | New Approach with Pandas |\n",
        "|---------------|---------------------------|\n",
        "| Lists of strings | Structured tables |\n",
        "| Loops over words | Operations over columns |\n",
        "| Manual counting | Built-in aggregation |\n",
        "| Hard-coded comparisons | Automatic alignment by label |\n",
        "| Descriptive patterns | Quantitative insights |\n",
        "\n",
        "> ⚡ You now think like a *linguistic data scientist*:  \n",
        "> “Each row is a word; each column is a property; the DataFrame is my corpus.”\n",
        "\n",
        "---\n"
      ],
      "id": "dcb050bd"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\andre\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}