{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Computation for Linguists\"\n",
        "subtitle: \"Pandasmonium, Day 1\"\n",
        "date: \"October 13, 2025\"\n",
        "author: \"Dr. Andrew M. Byrd\"\n",
        "format:\n",
        "  revealjs:\n",
        "    css: header_shrink.css\n",
        "    theme: beige\n",
        "    slide-number: true\n",
        "    center: true\n",
        "    toc: true\n",
        "    toc-title: \"Plan for the Day\"\n",
        "    toc-depth: 1\n",
        "jupyter: python3\n",
        "editor: source\n",
        "---\n",
        "\n",
        "\n",
        "# Review\n",
        "\n",
        "-   What did you learn last time?\n",
        "\n",
        "## Recap from Last Time\n",
        "\n",
        "-   Conditionals: `if` = 1 x\n",
        "-   Loops: `for` = multiple times\n",
        "-   Cleaning text with `.strip()`, `.lower()`\n",
        "\n",
        "## Review Activity\n",
        "\n",
        "1.  Copy the code below.\n",
        "2.  Use a `for` loop and a conditional to sort each letter of the word \"computation\" into consonants & vowels.\n",
        "3.  If the character is a vowel, print \"x is a vowel.\" If it is not a vowel, print \"x is not a vowel.\"\n",
        "\n",
        "``` python\n",
        "word = \"computation\"\n",
        "vowels = \"aeiou\"\n",
        "```\n",
        "\n",
        "# Setting up Pandas\n",
        "\n",
        "## Panda Power\n",
        "\n",
        "-   Python programmers often use **pandas** to sort, create, and analyze tabular data\n",
        "-   This will allow us to compute data found in spreadsheets, lexica, corpora.\n",
        "-   Note: **pandas** is built on top of a **NumPy** `array`.\n",
        "    -   This package allows you to compute high-level mathematical functions\n",
        "    -   For this reason, you can compute these things within **pandas** as well! (but not just yet)\n",
        "\n",
        "## Installing Pandas\n",
        "\n",
        "-   PC:\n",
        "\n",
        "``` bash\n",
        "pip install pandas\n",
        "```\n",
        "\n",
        "-   Mac:\n",
        "\n",
        "``` bash\n",
        "pip3 install pandas\n",
        "```\n",
        "\n",
        "## Loading Pandas\n",
        "\n",
        "-   To run in Python:\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "```\n",
        "\n",
        "⚠️ **Avoid file-name shadowing:** Don’t name your scripts `pandas.py`, `re.py`, `random.py`, etc.\n",
        "\n",
        "# How does Pandas Work?\n",
        "\n",
        "## What is Pandas?\n",
        "\n",
        "-   **Pandas**, short for **Panel Data**, is a Python **library**\n",
        "-   Allows the manipulation of tables within Python\n",
        "    -   very similar to a spreadsheet\n",
        "-   This is how we load pandas in our code\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "```\n",
        "\n",
        "## Pandas **Series**\n",
        "\n",
        "-   At the heart of a `pd` `df` (pandas dataframe), are `.Series()`:\n",
        "    -   1-D labeled data\n",
        "    -   a single labeled column or row\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "langs = pd.Series([\"Latin\", \"Greek\", \"Sanskrit\"], name=\"language\")\n",
        "langs\n",
        "```\n",
        "\n",
        "-   Right now, `name=\"language\"` isn't doing anything, but will later on.\n",
        "\n",
        "## Pandas **Series**\n",
        "\n",
        "-   You can give specific labels to the `index` of the `.Series()`\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "langs = pd.Series([\"Latin\", \"Greek\", \"Sanskrit\", \"Finnish\"], index=[\"a\",\"b\",\"c\",\"d\"], name=\"language\")\n",
        "langs\n",
        "```\n",
        "\n",
        "## Pandas **Series**\n",
        "\n",
        "-   `pd.Series()`:\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "langs = pd.Series([\"Latin\", \"Greek\", \"Sanskrit\", \"Finnish\"], index=[\"a\",\"b\",\"c\",\"d\"], name=\"language\")\n",
        "langs\n",
        "```\n",
        "\n",
        "-   Are conceptually similar to `dict`:\n",
        "\n",
        "``` python\n",
        "langs = {\"a\": \"Latin\", \"b\": \"Greek\", \"c\":\"Sanskrit\", \"d\":\"Finnish\"}\n",
        "```\n",
        "\n",
        "## Pandas **DataFrames**\n",
        "\n",
        "-   Pandas `.DataFrame()` is the most popular way to create csv structure in Python\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "lang_df = pd.DataFrame(langs)\n",
        "```\n",
        "\n",
        "## Pandas **DataFrames**\n",
        "\n",
        "-   You can combine **Series** that share the same index to create a **DataFrame**\n",
        "-   To do so let's create a second series.\n",
        "    -   Note the indices!\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "fam = pd.Series([\"Indo-European\", \"Indo-European\", \"Indo-European\", \"Uralic\"], index=[\"a\",\"b\",\"c\",\"d\"], name=\"family\")\n",
        "fam\n",
        "```\n",
        "\n",
        "## Pandas **DataFrames**\n",
        "\n",
        "-   And a third:\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "speakers = pd.Series([0, 0, 0, 6], index=[\"a\",\"b\",\"c\",\"d\"], name=\"speakers_millions\")\n",
        "speakers\n",
        "```\n",
        "\n",
        "## Pandas **DataFrames**\n",
        "\n",
        "-   We can combine them all together into a `df`\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "langs = pd.Series([\"Latin\", \"Greek\", \"Sanskrit\", \"Finnish\"], index=[\"a\",\"b\",\"c\",\"d\"], name=\"language\")\n",
        "fam = pd.Series([\"Indo-European\", \"Indo-European\", \"Indo-European\", \"Uralic\"], index=[\"a\",\"b\",\"c\",\"d\"], name=\"family\")\n",
        "speakers = pd.Series([0, 0, 0, 6], index=[\"a\",\"b\",\"c\",\"d\"], name=\"speakers_millions\")\n",
        "\n",
        "languages_df = pd.concat([langs, fam, speakers], axis=1)\n",
        "print(languages_df)\n",
        "```\n",
        "\n",
        "-   What does `axis=1` do?\n",
        "\n",
        "## Pandas **DataFrames**\n",
        "\n",
        "-   New method: pd.concat()\n",
        "    -   *concatenate* `pd` object with other(s) to make a `df`.\n",
        "-   Try this:\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "location = pd.Series([\"Italy\", \"Greece\", \"India\", \"Finland\"], index=[\"a\",\"b\",\"c\",\"d\"], name=\"location\")\n",
        "new_df = pd.concat([languages_df, location], axis=1)\n",
        "\n",
        "print(new_df)\n",
        "```\n",
        "\n",
        "## Pandas **DataFrames**\n",
        "\n",
        "-   Or you can just bypass the middle step and create the `df` initially:\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "fresh_df = pd.DataFrame({\n",
        "    \"language\": [\"Latin\", \"Greek\", \"Sanskrit\", \"Finnish\"],\n",
        "    \"family\":   [\"Indo-European\", \"Indo-European\", \"Indo-European\", \"Uralic\"],\n",
        "    \"speakers_millions\": [0, 0, 0, 6],\n",
        "    \"location\": [\"Italy\", \"Greece\", \"India\", \"Finland\"]\n",
        "}, index=[\"a\",\"b\",\"c\",\"d\"])\n",
        "\n",
        "print(fresh_df)\n",
        "```\n",
        "\n",
        "## Pandas Activity: Phonemic Inventory\n",
        "\n",
        "Using Pandas, recreate the following table:\n",
        "\n",
        "|     | sound | voicing   | place    | manner    |\n",
        "|-----|-------|-----------|----------|-----------|\n",
        "| 0   | /p/   | voiceless | bilabial | stop      |\n",
        "| 1   | /b/   | voiced    | bilabial | stop      |\n",
        "| 2   | /t/   | voiceless | alveolar | stop      |\n",
        "| 3   | /d/   | voiced    | alveolar | stop      |\n",
        "| 4   | /s/   | voiceless | alveolar | fricative |\n",
        "| 5   | /h/   | voiceless | glottal  | fricative |\n",
        "\n",
        "# Going from `[]`/`{}` to `df`\n",
        "\n",
        "## Converting Lists to a Series\n",
        "\n",
        "-   If you think about it, a list is just a single column of a `.DataFrame()`\n",
        "-   And for this reason, it's super easy to convert it to a `.Series()`\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "gettysburg = [\"Four\", \"score\", \"and\", \"seven\", \"years\", \"ago\"]\n",
        "getty = pd.Series(gettysburg)\n",
        "\n",
        "print(getty)\n",
        "```\n",
        "\n",
        "## Converting a `dict` to `.Series()`\n",
        "\n",
        "-   How would we convert a `dict` to a `.DataFrame()`?\n",
        "\n",
        "``` python\n",
        "languages = {\n",
        "    \"French\": \"Romance\",\n",
        "    \"Spanish\": \"Romance\",\n",
        "    \"Italian\": \"Romance\",\n",
        "    \"English\": \"Germanic\"\n",
        "}\n",
        "```\n",
        "\n",
        "## Converting a `dict` to `df`\n",
        "\n",
        "-   You can by simply using the below code, but:\n",
        "    -   Values must be placed inside of a list for this to work\n",
        "    -   It also gives the table a bit of an odd structure\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "languages = {\n",
        "    \"French\": [\"Romance\"],\n",
        "    \"Spanish\": [\"Romance\"],\n",
        "    \"Italian\": [\"Romance\"],\n",
        "    \"English\": [\"Germanic\"]\n",
        "}\n",
        "lang_df = pd.DataFrame(languages)\n",
        "print(lang_df)\n",
        "```\n",
        "\n",
        "## Making the Key the Index\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "languages = {\n",
        "    \"French\": \"Romance\",\n",
        "    \"Spanish\": \"Romance\",\n",
        "    \"Italian\": \"Romance\",\n",
        "    \"English\": \"Germanic\"\n",
        "}\n",
        "\n",
        "lang_df = pd.DataFrame.from_dict(languages, orient=\"index\", columns=[\"Family\"])\n",
        "print(lang_df)\n",
        "```\n",
        "\n",
        "## Keys & Values as Separate Columns\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "languages = {\n",
        "    \"French\": \"Romance\",\n",
        "    \"Spanish\": \"Romance\",\n",
        "    \"Italian\": \"Romance\",\n",
        "    \"English\": \"Germanic\"\n",
        "}\n",
        "\n",
        "lang_df = pd.DataFrame(list(languages.items()), columns=[\"Language\", \"Family\"])\n",
        "print(lang_df)\n",
        "```\n",
        "\n",
        "## DF Activity\n",
        "\n",
        "-   Build upon the most recent `df`, where the language & family were in separate columns.\n",
        "-   Create a new `df` called `new_info`, where you add the following values you will need to look up:\n",
        "    -   Primary (original?) location\n",
        "    -   Number of speakers (in millions)\n",
        "    -   Writing System\n",
        "    -   ISO code\n",
        "-   Concatenate this list, saving as `lang_updated`\n",
        "\n",
        "# Activity Answers\n",
        "\n",
        "## Review Activity\n",
        "\n",
        "``` python\n",
        "word = \"computation\"\n",
        "vowels = \"aeiou\"\n",
        "\n",
        "for c in word:\n",
        "    if c in vowels:\n",
        "        print(c, \"is a vowel.\")\n",
        "    else:\n",
        "        print(c, \"is not a vowel.\")\n",
        "```\n",
        "\n",
        "## Phonemic Inventory Pandas Activity\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "phon_inv = pd.DataFrame({\n",
        "    \"sound\" : [\"p\",\"b\",\"t\",\"d\",\"s\",\"h\"],\n",
        "    \"voicing\": [\"voiceless\", \"voiced\", \"voiceless\", \"voiced\", \"voiceless\", \"voiceless\"],\n",
        "    \"place\": [\"bilabial\", \"bilabial\", \"alveolar\", \"alveolar\", \"alveolar\", \"glottal\"], \n",
        "    \"manner\": [\"stop\", \"stop\", \"stop\", \"stop\", \"fricative\", \"fricative\"]})\n",
        "\n",
        "print(phon_inv)\n",
        "```\n",
        "\n",
        "## DF Activity\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "# Create new DF\n",
        "new_info = pd.DataFrame({\n",
        "    \"Location\": [\"France\", \"Spain\", \"Italy\", \"England\"],\n",
        "    \"Speakers_millions\": [80, 485, 65, 380],\n",
        "    \"Writing_System\": [\"Latin\", \"Latin\", \"Latin\", \"Latin\"],\n",
        "    \"ISO_code\": [\"fra\", \"spa\", \"ita\", \"eng\"]\n",
        "})\n",
        "# Concatenate horizontally\n",
        "lang_updated = pd.concat([lang_df, new_info], axis=1)\n",
        "\n",
        "print(lang_updated)\n",
        "```"
      ],
      "id": "c27f3e32"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\andre\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}