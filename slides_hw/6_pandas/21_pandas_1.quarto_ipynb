{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Computation for Linguists\"\n",
        "subtitle: \"Beginning Python: Pandasmonium, Day 1\"\n",
        "date: \"October 13, 2025\"\n",
        "author: \"Dr. Andrew M. Byrd\"\n",
        "format:\n",
        "  revealjs:\n",
        "    css: header_shrink.css\n",
        "    theme: beige\n",
        "    slide-number: true\n",
        "    center: true\n",
        "    toc: true\n",
        "    toc-title: \"Plan for the Day\"\n",
        "    toc-depth: 1\n",
        "jupyter: python3\n",
        "editor: source\n",
        "---\n",
        "\n",
        "\n",
        "# Review\n",
        "\n",
        "-   What did you learn last time?\n",
        "\n",
        "## Recap from Last Time\n",
        "\n",
        "-   Conditionals: `if` = 1 x\n",
        "-   Loops: `for` = multiple times\n",
        "-   Cleaning text with `.strip()`, `.lower()`\n",
        "\n",
        "## Review Activity\n",
        "\n",
        "-   Copy this list of messy words into your code, creating a list called `words`:\n",
        "\n",
        "``` python\n",
        "words = [\" Cat\\n\", \"dog\", \" BIRD \", \"fish\\n\", \"LION\", \"tiger \", \"bear\", \"OWL\\n\"]\n",
        "```\n",
        "\n",
        "-   Write a `for` loop that goes through each word. Inside the loop:\n",
        "    -   Use `.strip()` and `.lower()` to clean the word\n",
        "    -   Save each result in a variable called `cleaned`\n",
        "    -   Print each instance of `cleaned` in the loop.\n",
        "\n",
        "# Setting up Pandas\n",
        "\n",
        "## Panda Power\n",
        "\n",
        "- We'll use **pandas** for tabular data \n",
        "- This will allow us to compute data found in spreadsheets, lexica, corpora.\n",
        "- Note: **pandas** is built on top of a **NumPy** `array`.\n",
        "  - This package allows you to compute high-level mathematical functions\n",
        "  - You can compute these things within **pandas** as well\n",
        "\n",
        "## Installing Pandas\n",
        "\n",
        "To install:\n",
        "- PC: \n",
        "\n",
        "```bash\n",
        "pip install pandas\n",
        "```\n",
        "\n",
        "- Mac:\n",
        "```bash\n",
        "pip3 install pandas\n",
        "```\n",
        "\n",
        "## Loading Pandas\n",
        "\n",
        "- To run in Python:\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "```\n",
        "\n",
        "⚠️ **Avoid file-name shadowing:** Don’t name your scripts `pandas.py`, `re.py`, `random.py`, etc.\n",
        "\n",
        "# The Big Picture\n",
        "\n",
        "## What is Pandas?\n",
        "\n",
        "- **Pandas**, short for **Panel Data**\n",
        "- Allows the manipulation of tables within Python\n",
        "  - very similar to a spreadsheet\n",
        "\n",
        "## What is a **DataFrame**?\n",
        "\n",
        "- A table is called **DataFrame**:\n",
        "  - 2-D table built from **Series** sharing the same index.\n",
        "\n",
        "```python\n",
        "df = pd.DataFrame({\n",
        "    \"language\": [\"Latin\", \"Greek\", \"Sanskrit\", \"Finnish\"],\n",
        "    \"family\":   [\"Indo-European\", \"Indo-European\", \"Indo-European\", \"Uralic\"],\n",
        "    \"speakers_millions\": [0, 0, 0, 6],\n",
        "})\n",
        "df\n",
        "```\n",
        "\n",
        "## What is a **Series**?\n",
        "\n",
        "- **Series**: 1-D labeled data (like an ordered dict).\n",
        "- a single labeled column or row\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "\n",
        "langs = pd.Series([\"Latin\", \"Greek\", \"Sanskrit\"], index=[\"Italic\",\"Greek\",\"Indic\"], name=\"language\")\n",
        "langs\n",
        "```\n",
        "\n",
        "## Example of a DF\n",
        "\n",
        "- A DF is a collection of Series objects that share the same index\n",
        "\n",
        "```python\n",
        "data = {\"language\": [\"Latin\", \"Greek\", \"Sanskrit\"], \"family\": [\"IE\", \"IE\", \"IE\"]}\n",
        "df = pd.DataFrame(data)\n",
        "```\n",
        "\n",
        "- Run the above code. What are the indices of the 1st, 2nd, and 3rd rows?\n",
        "\n",
        "## Inspecting a DataFrame\n",
        "\n",
        "- Run this code - what do `.head()`, `.tail()`, `.shape`, `.columns`, and `.index` do? \n",
        "\n",
        "```python\n",
        "df.head()\n",
        "df.tail(2)\n",
        "df.shape, df.columns, df.index\n",
        "df.info()\n",
        "```\n",
        "\n",
        "## DF Activity\n",
        "\n",
        "# Indexing and Selecting\n",
        "\n",
        "## Selecting Columns\n",
        "\n",
        "```python\n",
        "df[\"language\"]           # Series\n",
        "df[[\"language\",\"family\"]]# DataFrame (note double brackets)\n",
        "```\n",
        "\n",
        "\n",
        "## Accessing Multiple Columns\n",
        "\n",
        "```python\n",
        "\n",
        "```\n",
        "\n",
        "## Selecting Rows by Integer Position\n",
        "```python\n",
        "df.iloc[0]               # first row\n",
        "df.iloc[1:3]             # slice rows 1..2\n",
        "```\n",
        "\n",
        "\n",
        "## Selecting Rows By Label\n",
        "```python\n",
        "# Rows by label (after we set a custom index)\n",
        "df2 = df.copy()\n",
        "df2.index = [\"a\",\"b\",\"c\",\"d\"]\n",
        "df2.loc[\"b\"]             # row labeled 'b'\n",
        "```\n",
        "\n",
        "\n",
        "## Cell Access (Row + Column)\n",
        "\n",
        "```python\n",
        "df.loc[0, \"language\"]        # cell by label/column\n",
        "df.iloc[0, 0]                # cell by position\n",
        "df.iloc[0:3, 0:2]            # rows 0..2, cols 0..1\n",
        "```\n",
        "\n",
        "## Boolean Filtering\n",
        "\n",
        "```python\n",
        "ie = df[df[\"family\"] == \"Indo-European\"]\n",
        "ie\n",
        "```\n",
        "\n",
        "# Modifying DataFrames\n",
        "\n",
        "## Adding New Columns\n",
        "\n",
        "```python\n",
        "df[\"is_extinct\"] = [True, False, False, True]\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Dropping Columns & Rows\n",
        "\n",
        "```python\n",
        "# Drop (returns a new DF unless inplace=True)\n",
        "df_no_family = df.drop(columns=[\"family\"])\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "## Renaming Columns\n",
        "\n",
        "```python\n",
        "df = df.rename(columns={\"speakers_millions\": \"speakers_M\"})\n",
        "```\n",
        "\n",
        "\n",
        "## (Re)setting Indices\n",
        "\n",
        "\n",
        "```python\n",
        "df_reset = df.reset_index(drop=True)\n",
        "df_set = df.set_index(\"language\")\n",
        "df_set\n",
        "```\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "## **Day 1 Activity — Mini Lexicon**\n",
        "\n",
        "Create a small lexicon and practice selection & modification.\n",
        "\n",
        "```python\n",
        "lex = pd.DataFrame({\n",
        "    \"Language\": [\"Latin\",\"Greek\",\"Sanskrit\",\"Old English\"],\n",
        "    \"Root\": [\"fer-\",\"phér-\",\"bhar-\",\"ber-\"],\n",
        "    \"Gloss\": [\"carry\",\"carry\",\"carry\",\"carry\"]\n",
        "})\n",
        "# Tasks:\n",
        "# 1) Show only Language + Root\n",
        "# 2) Add Family = \"IE\" for all\n",
        "# 3) Rename Gloss -> Meaning\n",
        "# 4) Set index to Language, then select the Sanskrit row by label\n",
        "```\n"
      ],
      "id": "badb21d7"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\andre\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}