{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Computation for Linguists\"\n",
        "subtitle: \"Beginning Python: Pandasmonium, Day 1`\"\n",
        "date: \"October 13, 2025\"\n",
        "author: \"Dr. Andrew M. Byrd\"\n",
        "format:\n",
        "  revealjs:\n",
        "    css: header_shrink.css\n",
        "    theme: beige\n",
        "    slide-number: true\n",
        "    center: true\n",
        "    toc: true\n",
        "    toc-title: \"Plan for the Day\"\n",
        "    toc-depth: 1\n",
        "jupyter: python3\n",
        "editor: source\n",
        "---\n",
        "\n",
        "\n",
        "# Review\n",
        "\n",
        "-   What did you learn last time?\n",
        "\n",
        "## Recap from Last Time\n",
        "\n",
        "-   Conditionals: `if` = 1 x\n",
        "-   Loops: `for` = multiple times\n",
        "-   Cleaning text with `.strip()`, `.lower()`\n",
        "\n",
        "## Review Activity\n",
        "\n",
        "-   Copy this list of messy words into your code, creating a list called `words`:\n",
        "\n",
        "``` python\n",
        "words = [\" Cat\\n\", \"dog\", \" BIRD \", \"fish\\n\", \"LION\", \"tiger \", \"bear\", \"OWL\\n\"]\n",
        "```\n",
        "\n",
        "-   Write a `for` loop that goes through each word. Inside the loop:\n",
        "    -   Use `.strip()` and `.lower()` to clean the word\n",
        "    -   Save each result in a variable called `cleaned`\n",
        "    -   Print each instance of `cleaned` in the loop.\n",
        "\n",
        "# Setting up Pandas\n",
        "\n",
        "## Panda Power\n",
        "\n",
        "## Installing Pandas\n",
        "\n",
        "PC: \n",
        "\n",
        "```bash\n",
        "pip install pandas\n",
        "```\n",
        "\n",
        "Mac:\n",
        "```bash\n",
        "pip3 install pandas\n",
        "```\n",
        "\n",
        "\n",
        "## Review Activity - Revisited\n",
        "\n",
        "-   Here is one way that we could have done the review activity:\n",
        "\n",
        "``` python\n",
        "words = [\" Cat\\n\", \"dog\", \" BIRD \", \"fish\\n\", \"LION\", \"tiger \", \"bear\", \"OWL\\n\"]\n",
        "\n",
        "for word in words:\n",
        "    cleaned = word.strip().lower()\n",
        "    print(cleaned)\n",
        "```\n",
        "\n",
        "## Review Activity - Revisited\n",
        "\n",
        "-   But how to *maintain* these words in a list?\n",
        "\n",
        "-   First, more straightforward (but less efficient) way:\n",
        "\n",
        "``` python\n",
        "words = [\" Cat\\n\", \"dog\", \" BIRD \", \"fish\\n\", \"LION\", \"tiger \", \"bear\", \"OWL\\n\"]\n",
        "cleaned_words = []\n",
        "\n",
        "for word in words:\n",
        "    cleaned = word.strip().lower()\n",
        "    cleaned_words.append(cleaned)\n",
        "\n",
        "print(cleaned_words)\n",
        "```\n",
        "\n",
        "-   Here we used the `.append()` method\n",
        "\n",
        "## Review Activity - Revisited\n",
        "\n",
        "-   Second, more efficient but trickier way is to use a **list comprehension**, through which we don't even have to use `.append()`:\n",
        "\n",
        "``` python\n",
        "words = [\" Cat\\n\", \"dog\", \" BIRD \", \"fish\\n\", \"LION\", \"tiger \", \"bear\", \"OWL\\n\"]\n",
        "\n",
        "cleaned_words = [word.strip().lower() for word in words]\n",
        "\n",
        "print(cleaned_words)\n",
        "```\n",
        "\n",
        "## Counters\n",
        "\n",
        "-   In Linguistics, we often want to know how many words are in a text or how many sounds are in a word.\n",
        "-   We could use the `len()` command:\n",
        "\n",
        "``` python\n",
        "items = [\"color\", \"flavour\", \"theater\", \"center\", \"analyze\", \"organize\", \"favorite\", \"neighbor\", \"honor\", \"catalog\", \"honour\", \"flavor\", \"analyse\", \"flavor\", \"traveler\"]\n",
        "print(len(items))\n",
        "```\n",
        "\n",
        "## Counters\n",
        "\n",
        "-   Or we could create a **counter**, to count how many items there are:\n",
        "\n",
        "``` python\n",
        "items = [\"color\", \"flavour\", \"theater\", \"center\", \"analyze\", \"organize\", \"favorite\", \"neighbor\", \"honor\", \"catalog\", \"honour\", \"flavor\", \"analyse\", \"flavor\", \"traveler\"]\n",
        "\n",
        "item_count = 0\n",
        "for item in items:\n",
        "    item_count += 1\n",
        "    print(item, item_count)\n",
        "```\n",
        "\n",
        "## Counters\n",
        "\n",
        "-   We can do *much* more interesting things with counters, such as:\n",
        "\n",
        "``` python\n",
        "items = [\"color\", \"flavour\", \"theater\", \"center\", \"analyze\", \"organize\", \"favorite\", \"neighbor\", \"honor\", \"catalog\", \"honour\", \"flavor\", \"analyse\", \"flavor\", \"traveler\"]\n",
        "\n",
        "c_item_count = 0\n",
        "for item in items:\n",
        "    if item[0] == \"c\":\n",
        "        c_item_count += 1\n",
        "        print(item, c_item_count)\n",
        "```\n",
        "\n",
        "## Counter Activity\n",
        "\n",
        "-   Identify how many words end in \"r\" in the following list:\n",
        "\n",
        "``` python\n",
        "items = [\"color\", \"flavour\", \"theater\", \"center\", \"analyze\", \"organize\", \"favorite\", \"neighbor\", \"honor\", \"catalog\", \"honour\", \"flavor\", \"analyse\", \"flavor\", \"traveler\"]\n",
        "```\n",
        "\n",
        "## If you're like me, you might be confused by:\n",
        "\n",
        "-   Index vs. Integer\n",
        "\n",
        "``` python\n",
        "word = \"word\"\n",
        "word[0]\n",
        "numb = 0\n",
        "```\n",
        "\n",
        "## `.replace()`\n",
        "\n",
        "-   Let's return to our `items` list\n",
        "-   Notice some inconsistencies in spellings?\n",
        "\n",
        "``` python\n",
        "items = [\"color\", \"flavour\", \"theater\", \"center\", \"analyze\", \"organize\", \"favorite\", \"neighbor\", \"honor\", \"catalog\", \"honour\", \"flavor\", \"analyse\", \"flavor\", \"traveler\"]\n",
        "```\n",
        "\n",
        "## `.replace()`\n",
        "\n",
        "-   A method to replace one string with another.\n",
        "\n",
        "``` python\n",
        "word = \"four\"\n",
        "new_word  = word.replace(\"our\", \"or\")\n",
        "print(new_word)\n",
        "```\n",
        "\n",
        "## `.replace()`\n",
        "\n",
        "-   Let's broaden the scope so that it applies to all words ending in \"-our\"\n",
        "\n",
        "``` python\n",
        "items = [\"color\", \"flavour\", \"theater\", \"center\", \"analyze\", \"organize\", \"favorite\", \"neighbor\", \"honor\", \"catalog\", \"honour\", \"flavor\", \"analyse\", \"flavor\", \"traveler\"]\n",
        "\n",
        "down_with_brits = []\n",
        "for word in items:\n",
        "    if word.endswith(\"our\"):\n",
        "        word = word.replace(\"our\", \"or\")\n",
        "    down_with_brits.append(word)\n",
        "\n",
        "print(down_with_brits)\n",
        "```\n",
        "\n",
        "-   Note the `.endswith()` method - there's also `.startswith()`\n",
        "\n",
        "## `.replace()` Activity\n",
        "\n",
        "-   Broaden your `if` block to have words ending in \"-yse\" respelled as \"-yze\"\n",
        "\n",
        "## `.split()`\n",
        "\n",
        "-   We can also take a line of text and split it up into a list.\n",
        "\n",
        "``` python\n",
        "getty = \"Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.\"\n",
        "\n",
        "getty.split()\n",
        "```\n",
        "\n",
        "-   By default, `split()` separates according to whitespace.\n",
        "\n",
        "## `.split()`\n",
        "\n",
        "-   But what happens if you do the following?\n",
        "\n",
        "``` python\n",
        "getty = \"Four score and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.\"\n",
        "\n",
        "getty_1 = getty.split(\",\")\n",
        "getty_2 = getty.split(\".\")\n",
        "getty_3 = getty.split(\"e\")\n",
        "print(getty_1, \"\\n\", getty_2, \"\\n\", getty_3)\n",
        "```\n",
        "\n",
        "## `re.split()`\n",
        "\n",
        "-   How would you split according to whitespace *and* punctuation?\n",
        "-   Our old friend `regex`\n",
        "-   Create a new codeblock and paste this code (you may have to create a separate `.py` file):\n",
        "\n",
        "``` python\n",
        "import re\n",
        "\n",
        "text = \"Hello, world!   This... is a test.\"\n",
        "words = re.split(r\"[\\s\\W]+\", text)\n",
        "words = [w for w in words if w]\n",
        "print(words)\n",
        "```\n",
        "\n",
        "## `re.split()`\n",
        "\n",
        "``` python\n",
        "import re\n",
        "\n",
        "text = \"Hello, world!   This... is a test.\"\n",
        "words = re.split(r\"[\\s\\W]+\", text)\n",
        "words = [w for w in words if w]\n",
        "print(words)\n",
        "```\n",
        "\n",
        "-   `\\s` = whitespace\n",
        "-   `\\W` = non-word characters (punctuation, symbols, etc.)\n",
        "-   `+` = one or more preceding\n",
        "\n",
        "## `re.split()`\n",
        "\n",
        "-   Revisit your file `alice.txt` (found at https://www.gutenberg.org/cache/epub/11/pg11.txt)\n",
        "-   Load up `alice.txt` in Python using the following code:\n",
        "\n",
        "``` python\n",
        "with open(\"alice.txt\", \"r\", encoding=\"utf-8\") as f:\n",
        "    alice_text = f.read()\n",
        "```\n",
        "\n",
        "-   Using `re.split()` create a new list called `alice_list`, containing all words, minus whitespace and non-word characters\n",
        "-   Confirm it worked by using `print(alice_text[0:100])`\n",
        "\n",
        "# `while` Loops\n",
        "\n",
        "## `while` Loops\n",
        "\n",
        "-   They're a lot like `if` statements, where something happens if a condition is met:\n",
        "\n",
        "``` python\n",
        "x = 0\n",
        "if x < 10:\n",
        "    print(x, \"is less than 10.\")\n",
        "```\n",
        "\n",
        "## `while` Loops\n",
        "\n",
        "-   In `while` loops, there's also a logical condition\n",
        "-   But instead of running the code once, python will loop back and recheck the conditional\n",
        "-   It will do this **forever** until the conditional returns `False`\n",
        "\n",
        "``` python\n",
        "x = 10\n",
        "while x < 10:\n",
        "    print(x, \"is less than 10.\")\n",
        "    x = x + 1\n",
        "```\n",
        "\n",
        "## `while` Loops\n",
        "\n",
        "-   Be **careful** with `while` loops! Code (like below) will run ad infinitum and could crash your computer:\n",
        "\n",
        "```         \n",
        "x = 0\n",
        "while x < 10:\n",
        "    print(x, \"is less than 10.\")\n",
        "    x = x - 1\n",
        "```\n",
        "\n",
        "## `while` Loops\n",
        "\n",
        "-   In this class, we will mostly use `for` loops\n",
        "-   But you can do some interesting things with `while` loops, like:\n",
        "\n",
        "``` python\n",
        "name = \"The University of Kentucky\"\n",
        "while name: \n",
        "      print(\"|\" + name + \"|\") \n",
        "      name = name[0:-1]\n",
        "```\n",
        "\n",
        "# Activity Answers\n",
        "\n",
        "## Review Activity\n",
        "\n",
        "``` python\n",
        "\n",
        "words = [\" Cat\\n\", \"dog\", \" BIRD \", \"fish\\n\", \"LION\", \"tiger \", \"bear\", \"OWL\\n\"]\n",
        "\n",
        "for word in words:\n",
        "    cleaned = word.strip().lower()\n",
        "    print(cleaned)\n",
        "```\n",
        "\n",
        "## Counter Activity\n",
        "\n",
        "``` python\n",
        "items = [\"color\", \"flavour\", \"theater\", \"center\", \"analyze\", \"organize\", \"favorite\", \"neighbor\", \"honor\", \"catalog\", \"honour\", \"flavor\", \"analyse\", \"flavor\", \"traveler\"]\n",
        "\n",
        "r_item_count = 0\n",
        "for item in items:\n",
        "    if item[-1] == \"r\":\n",
        "        r_item_count += 1\n",
        "        print(item, r_item_count)\n",
        "```\n",
        "\n",
        "## .replace() Activity\n",
        "\n",
        "``` python\n",
        "items = [\"color\", \"flavour\", \"theater\", \"center\", \"analyze\", \"organize\", \"favorite\", \"neighbor\", \"honor\", \"catalog\", \"honour\", \"flavor\", \"analyse\", \"flavor\", \"traveler\"]\n",
        "\n",
        "down_with_brits = []\n",
        "for word in items: \n",
        "    if word.endswith(\"our\"): \n",
        "        word = word.replace(\"our\", \"or\") \n",
        "    elif word.endswith(\"yse\"): \n",
        "        word = word.replace(\"yse\", \"yze\") \n",
        "    down_with_brits.append(word)\n",
        "print(down_with_brits)\n",
        "```\n",
        "\n",
        "## .re.split() Activity\n",
        "\n",
        "``` python\n",
        "\n",
        "import re\n",
        "with open(\"alice.txt\", \"r\", encoding=\"utf-8\") as f:\n",
        "    alice_text = f.read()\n",
        "alice_list = re.split(r\"[\\s\\W]+\", alice_text)\n",
        "alice_list = [w for w in alice_list if w]\n",
        "print(alice_list[0:100]) \n",
        "```"
      ],
      "id": "4fd6b492"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\andre\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}