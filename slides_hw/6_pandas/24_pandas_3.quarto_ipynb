{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Computation for Linguists\"\n",
        "subtitle: \"Pandasmonium: Day 3\"\n",
        "date: \"October 20, 2025\"\n",
        "author: \"Dr. Andrew M. Byrd\"\n",
        "format:\n",
        "  revealjs:\n",
        "    css: header_shrink.css\n",
        "    theme: beige\n",
        "    slide-number: true\n",
        "    center: true\n",
        "    toc: true\n",
        "    toc-title: \"Plan for the Day\"\n",
        "    toc-depth: 1\n",
        "jupyter: python3\n",
        "editor: source\n",
        "---\n",
        "\n",
        "\n",
        "# Review\n",
        "\n",
        "-   What did you learn last time?\n",
        "\n",
        "## Recap from Last Time\n",
        "\n",
        "-   ddddddddd\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame([word1, word2, word3], columns=langs)\n",
        "print(df)\n",
        "```\n",
        "\n",
        "## Review Activity\n",
        "\n",
        "- Copy the below strings, and convert to lists.\n",
        "\n",
        "```python\n",
        "line1 = \"English German Spanish French\"\n",
        "line2 = \"dog Hund perro chien\"\n",
        "line3 = \"cat Katze gato chat\"\n",
        "line4 = \"house Haus casa maison\"\n",
        "```\n",
        "- Once you've done that, convert to a `DataFrame`, with the languages in `line1` serving as the column headers.\n",
        "\n",
        "# Modifying DataFrames\n",
        "\n",
        "## Load up the languages `df`\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\n",
        "    \"language\": [\"Latin\", \"Greek\", \"Sanskrit\", \"Finnish\"],\n",
        "    \"family\":   [\"Indo-European\", \"Indo-European\", \"Indo-European\", \"Uralic\"],\n",
        "    \"speakers_millions\": [0, 0, 0, 6],\n",
        "    \"location\": [\"Italy\", \"Greece\", \"India\", \"Finland\"]\n",
        "})\n",
        "\n",
        "df\n",
        "```\n",
        "\n",
        "## Adding New Columns\n",
        "\n",
        "-   We've seen that you can combine two `df`s together with `pd.concat()`\n",
        "\n",
        "-   There's a simpler way, though, to add a `.Series()` that should remind you of lists and dicts:\n",
        "\n",
        "``` python\n",
        "df[\"is_extinct\"] = [True, True, True, False]\n",
        "df\n",
        "```\n",
        "\n",
        "## Dropping Columns & Rows\n",
        "\n",
        "-   We can drop a `.Series()` with `.drop()`\n",
        "\n",
        "``` python\n",
        "# Drop (returns a new DF unless inplace=True)\n",
        "df_no_family = df.drop(columns=[\"family\"])\n",
        "df_no_family\n",
        "```\n",
        "## Dropping Columns & Rows\n",
        "\n",
        "-   Or a row with `.drop([index])`\n",
        "\n",
        "``` python\n",
        "# Drop (returns a new DF unless inplace=True) \n",
        "df_no_latin = df.drop([0])\n",
        "df_no_latin\n",
        "```\n",
        "\n",
        "## Renaming Columns\n",
        "\n",
        "-   You can easily rename a column with the `.rename()` method\n",
        "\n",
        "``` python\n",
        "df = df.rename(columns={\"speakers_millions\": \"speakers_M\"})\n",
        "df\n",
        "```\n",
        "\n",
        "## (Re)setting Indices\n",
        "\n",
        "- You can reset an index with `.reset_index()`\n",
        "\n",
        "``` python\n",
        "df_reset_no_latin = df_no_latin.reset_index()\n",
        "df_reset_no_latin\n",
        "```\n",
        "\n",
        "## (Re)setting Indices\n",
        "\n",
        "-   Drop an index with `.reset_index(drop=True)`\n",
        "\n",
        "``` python\n",
        "df_ind_drop = df.reset_index(drop=True)\n",
        "df_ind_drop\n",
        "```\n",
        "\n",
        "\n",
        "## (Re)setting Indices\n",
        "\n",
        "Or convert a `.Series()` to the index\n",
        "\n",
        "``` python\n",
        "df_set = df.set_index(\"language\")\n",
        "df_set\n",
        "```\n",
        "\n",
        "## Activity: Change Index of the pd df they built for review activity\n",
        "\n",
        "- Load up the `df` you built for the Review Activity\n",
        "- Create three new `df` by:\n",
        "  - Dropping the first row, then resetting the index\n",
        "  - Leave the `df` intact, but drop the index altogether\n",
        "  - Convert the `English` column into the index.\n",
        "\n",
        "# Filtering, Sorting, Combining\n",
        "\n",
        "## Sorting\n",
        "\n",
        "- You can sort values in all sorts of ways in `pd`\n",
        "\n",
        "```python \n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\n",
        "    \"language\": [\"Latin\", \"Greek\", \"Sanskrit\", \"Finnish\"],\n",
        "    \"family\":   [\"Indo-European\", \"Indo-European\", \"Indo-European\", \"Uralic\"],\n",
        "    \"speakers_M\": [0, 0, 0, 6],\n",
        "    \"location\": [\"Italy\", \"Greece\", \"India\", \"Finland\"]\n",
        "})\n",
        "\n",
        "df.sort_values(by=\"location\", ascending=True)\n",
        "```\n",
        "\n",
        "\n",
        "## Sorting\n",
        "\n",
        "- Or if you'd like to organize by the index\n",
        "\n",
        "```python\n",
        "df.sort_index() # by index\n",
        "```\n",
        "\n",
        "## Combining Series Side-by-Side\n",
        "\n",
        "- So far you've only combined `df`s that are aligned by index\n",
        "\n",
        "``` python\n",
        "reflexes_verb = pd.Series(\n",
        "    {\"Latin\": 8, \"Greek\": 10, \"Sanskrit\": 12, \"Old English\": 6}\n",
        ")\n",
        "reflexes_noun = pd.Series(\n",
        "    {\"Latin\": 5, \"Greek\": 7, \"Gothic\": 4, \"Old Church Slavonic\": 3}\n",
        ")\n",
        "\n",
        "combined = pd.DataFrame({\"verb\": reflexes_verb, \"noun\": reflexes_noun})\n",
        "combined\n",
        "```\n",
        "\n",
        "## Handling Missing Data\n",
        "\n",
        "- Maybe you'd like to fill in a null value where there's `NaN`\n",
        "  - \"Not a Number\"\n",
        "\n",
        "``` python\n",
        "combined_filled = combined.fillna(0)\n",
        "```\n",
        "\n",
        "## Handling Missing Data\n",
        "\n",
        "- Or perhaps drop those rows all together\n",
        "\n",
        "```python\n",
        "combined_dropped = combined.dropna()\n",
        "```\n",
        "\n",
        "## Adding Across Rows (fill missing)\n",
        "\n",
        "- You can also use `.add()` to total all of the reflexes in the `df` by language \n",
        "\n",
        "``` python\n",
        "total = reflexes_verb.add(reflexes_noun, fill_value=0)\n",
        "total.sort_values(ascending=False)\n",
        "```\n",
        "\n",
        "## Adding Across a Column\n",
        "\n",
        "```python\n",
        "\n",
        "{python}\n",
        "reflexes_verb = pd.Series(\n",
        "    {\"Latin\": 8, \"Greek\": 10, \"Sanskrit\": 12, \"Old English\": 6}\n",
        ")\n",
        "reflexes_noun = pd.Series(\n",
        "    {\"Latin\": 5, \"Greek\": 7, \"Gothic\": 4, \"Old Church Slavonic\": 3}\n",
        ")\n",
        "combined = pd.DataFrame({\"verb\": reflexes_verb, \"noun\": reflexes_noun})\n",
        "combined\n",
        "\n",
        "column_totals = combined.sum(axis=0)\n",
        "print(column_totals)\n",
        "```\n",
        "\n",
        "## Activity: Counting Sounds, Part 1\n",
        "\n",
        "- Below is a table of consonants that occur in a constructed language novel.\n",
        "\n",
        "| Chapter | s  | z  | t  | k  | m  | n  |\n",
        "| ------- | -- | -- | -- | -- | -- | -- |\n",
        "| 1       | 35 | 20 | 50 | 42 | 18 | 22 |\n",
        "| 2       | 28 | 25 | 40 | 35 | 12 | 20 |\n",
        "| 3       | 40 | 18 | 53 | 48 | 17 | 19 |\n",
        "\n",
        "- Using (multiple!) `.add()`, tally up how many Cs are in each chapter. \n",
        "\n",
        "## Activity: Counting Sounds, Part 2\n",
        "\n",
        "| Chapter | s  | z  | t  | k  | m  | n  |\n",
        "| ------- | -- | -- | -- | -- | -- | -- |\n",
        "| 1       | 35 | 20 | 50 | 42 | 18 | 22 |\n",
        "| 2       | 28 | 25 | 40 | 35 | 12 | 20 |\n",
        "| 3       | 40 | 18 | 53 | 48 | 17 | 19 |\n",
        "\n",
        "- Using `.sum()` and `.add()`, identify the total number of fricatives.\n",
        "\n",
        "\n",
        "# Activity Answers\n",
        "\n",
        "## Review Activity\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "\n",
        "line1 = \"English German Spanish French\"\n",
        "line2 = \"dog Hund perro chien\"\n",
        "line3 = \"cat Katze gato chat\"\n",
        "line4 = \"house Haus casa maison\"\n",
        "\n",
        "langs = line1.split()\n",
        "word1 = line2.split()\n",
        "word2 = line3.split()\n",
        "word3 = line4.split()\n",
        "\n",
        "df = pd.DataFrame([word1, word2, word3], columns=langs)\n",
        "print(df)\n",
        "```\n",
        "\n",
        "## Activity: Change Index of the pd df they built for review activity\n",
        "\n",
        "## Activity: Counting Sounds, Part 1\n",
        "\n",
        "```python\n",
        "import pandas as pd\n",
        "\n",
        "sound_df = pd.DataFrame({\n",
        "    \"s\": [35, 28, 40],\n",
        "    \"z\": [20, 25, 18],\n",
        "    \"t\": [50, 40, 53],\n",
        "    \"k\": [42, 35, 48],\n",
        "    \"m\": [18, 12, 17],\n",
        "    \"n\": [22, 20, 19],\n",
        "})\n",
        "\n",
        "total_c = sound_df[\"s\"].add(sound_df[\"z\"]).add(sound_df[\"t\"]).add(sound_df[\"k\"]).add(sound_df[\"m\"]).add(sound_df[\"n\"])\n",
        "```\n",
        "\n",
        "## Activity: Counting Sounds, Part 2\n",
        "\n",
        "```python\n",
        "sound_df = sound_df.set_index(\"Chapter\")\n",
        "\n",
        "print(sound_df)\n",
        "\n",
        "```"
      ],
      "id": "c1c50849"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\andre\\AppData\\Local\\Programs\\Python\\Python313\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}