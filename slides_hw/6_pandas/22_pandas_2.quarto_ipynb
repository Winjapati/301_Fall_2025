{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Computation for Linguists\"\n",
        "subtitle: \"Pandasmonium, Day 2\"\n",
        "date: \"October 15, 2025\"\n",
        "author: \"Dr. Andrew M. Byrd\"\n",
        "format:\n",
        "  revealjs:\n",
        "    css: header_shrink.css\n",
        "    theme: beige\n",
        "    slide-number: true\n",
        "    center: true\n",
        "    toc: true\n",
        "    toc-title: \"Plan for the Day\"\n",
        "    toc-depth: 1\n",
        "jupyter: python3\n",
        "editor: source\n",
        "---\n",
        "\n",
        "\n",
        "# Review\n",
        "\n",
        "-   What did you learn last time?\n",
        "\n",
        "## Recap from Last Time\n",
        "\n",
        "-   pandas!\n",
        "    -   `.Series()`\n",
        "    -   `.DataFrame`\n",
        "-   Creating `df`\n",
        "    -   `pd.DataFrame(dict)`\n",
        "    -   `pd.concat([series_1, series_2], axis=1`\n",
        "    -   `pd.DataFrame.from_dict(dict, orient=\"index\", columns=[dict_value])`\n",
        "    -   `pd.DataFrame(list(dict.items()), columns=[key, value])`\n",
        "\n",
        "# Indexing and Selecting\n",
        "\n",
        "## Loading up our previous `pd`\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "fresh_df = pd.DataFrame({\n",
        "    \"language\": [\"Latin\", \"Greek\", \"Sanskrit\", \"Finnish\"],\n",
        "    \"family\":   [\"Indo-European\", \"Indo-European\", \"Indo-European\", \"Uralic\"],\n",
        "    \"speakers_millions\": [0, 0, 0, 6],\n",
        "    \"location\": [\"Italy\", \"Greece\", \"India\", \"Finland\"]\n",
        "})\n",
        "\n",
        "print(fresh_df)\n",
        "```\n",
        "\n",
        "## Inspecting a DataFrame\n",
        "\n",
        "-   Run this code - what do `.head()`, `.tail()`, `.shape`, `.columns`, and `.index` do?\n",
        "\n",
        "``` python\n",
        "df.head(2) \n",
        "df.tail(2) \n",
        "df.shape\n",
        "df.columns\n",
        "df.index\n",
        "df.info()\n",
        "```\n",
        "\n",
        "## Accessing Single Columns\n",
        "\n",
        "-   We can access a single `.Series()` using `df[ ]`\n",
        "\n",
        "``` python\n",
        "df[\"language\"]           # Series\n",
        "```\n",
        "\n",
        "## Accessing Multiple Columns\n",
        "\n",
        "-   Or multiple columns using `df[[ ]]`\n",
        "\n",
        "``` python\n",
        "df[[\"language\",\"family\"]] # DataFrame\n",
        "```\n",
        "\n",
        "## Selecting Rows by Integer Position\n",
        "\n",
        "-   We can access specific rows using `df.iloc`\n",
        "    -   \"integer location\"\n",
        "\n",
        "``` python\n",
        "df.iloc[0]               # first row\n",
        "df.iloc[1:3]             # slice rows 1..2\n",
        "```\n",
        "\n",
        "## Selecting Rows By Label\n",
        "\n",
        "-   Or rows with a custom index using `df.loc`\n",
        "\n",
        "``` python\n",
        "# Rows by label (after we set a custom index)\n",
        "df2 = df.copy()\n",
        "df2.index = [\"a\",\"b\",\"c\",\"d\"]\n",
        "df2.loc[\"b\"]             # row labeled 'b'\n",
        "```\n",
        "\n",
        "## Cell Access (Row + Column)\n",
        "\n",
        "-   We can access a specific cell by label/column\n",
        "\n",
        "``` python\n",
        "df.loc[0, \"language\"]        # cell by label/column\n",
        "```\n",
        "\n",
        "-   Or using `.iloc` with specific coordinates\n",
        "\n",
        "``` python\n",
        "df.iloc[0, 0]                # cell by position\n",
        "```\n",
        "\n",
        "-   We can also slice in 2D ways:\n",
        "\n",
        "``` python\n",
        "df.iloc[0:3, 0:2]            # rows 0..2, cols 0..1\n",
        "```\n",
        "\n",
        "## Boolean Filtering\n",
        "\n",
        "-   And lastly we can filter our table using Boolean operators for specific properties:\n",
        "\n",
        "``` python\n",
        "ie = df[df[\"family\"] == \"Indo-European\"]\n",
        "ie\n",
        "```\n",
        "\n",
        "## Complex Filtering\n",
        "\n",
        "-   Use the operators `&` (and) and `|` (or)\n",
        "\n",
        "``` python\n",
        "df[(df[\"family\"]==\"Indo-European\") & (df[\"location\"]==\"India\")]\n",
        "df[(df[\"family\"]==\"Indo-European\") | (df[\"location\"]==\"Finland\")]\n",
        "```\n",
        "\n",
        "## Complex Filtering\n",
        "\n",
        "-   Place `~` in front of the filter to mean **not**\n",
        "\n",
        "``` python\n",
        "df[~(df[\"family\"]==\"Indo-European\")]\n",
        "```\n",
        "\n",
        "## Complex Filtering\n",
        "\n",
        "-   To sort a `df` alphabetically by a specific `.Series()`, use the method `.sort_values()`\n",
        "\n",
        "``` python\n",
        "df.sort_values([\"location\"])\n",
        "```\n",
        "\n",
        "## Counting\n",
        "\n",
        "-   You can add up the total number of a `.Series()` using the `.sum()` method\n",
        "\n",
        "``` python\n",
        "df[\"speakers_millions\"].sum()\n",
        "```\n",
        "\n",
        "-   Which you can display as a regular `int` using `int()`:\n",
        "\n",
        "``` python\n",
        "int(df[\"speakers_millions\"].sum())\n",
        "```\n",
        "\n",
        "## Activity: English Vowels\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "eng_vowels = pd.DataFrame({\n",
        "    \"symbol\": [\"i\", \"ɪ\", \"e\", \"ɛ\", \"æ\", \"u\", \"ʊ\", \"o\", \"ɔ\", \"ɑ\", \"ʌ\", \"ə\"],\n",
        "    \"height\": [\"high\", \"high\", \"mid\", \"mid\", \"low\", \"high\", \"high\", \"mid\", \"mid\", \"low\", \"mid\", \"mid\"],\n",
        "    \"backness\": [\"front\", \"front\", \"front\", \"front\", \"front\",\n",
        "                 \"back\", \"back\", \"back\", \"back\", \"back\",\n",
        "                 \"central\", \"central\"],\n",
        "    \"tense\":   [True, False, True, False, False,\n",
        "                True, False, True, False, False,\n",
        "                False, False],\n",
        "    \"rounded\": [False, False, False, False, False,\n",
        "                True, True, True, True, False,\n",
        "                False, False]\n",
        "})\n",
        "\n",
        "eng_vowels\n",
        "```\n",
        "\n",
        "## Activity: English Vowels\n",
        "\n",
        "1.  Filter the `df`: show only **high back rounded vowels**\n",
        "\n",
        "2.  Negation and slicing: display all vowels that are **not tense**.\n",
        "\n",
        "3.  Then display only the first three vowels of that group.\n",
        "\n",
        "4.  Sort the `df` by **height** and **backness**.\n",
        "\n",
        "5.  Count how many vowels are **rounded**, **tense** and **both**.\n",
        "\n",
        "# Modifying DataFrames\n",
        "\n",
        "## Reloading the languages `df`\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "df = pd.DataFrame({\n",
        "    \"language\": [\"Latin\", \"Greek\", \"Sanskrit\", \"Finnish\"],\n",
        "    \"family\":   [\"Indo-European\", \"Indo-European\", \"Indo-European\", \"Uralic\"],\n",
        "    \"speakers_millions\": [0, 0, 0, 6],\n",
        "    \"location\": [\"Italy\", \"Greece\", \"India\", \"Finland\"]\n",
        "})\n",
        "\n",
        "print(df)\n",
        "```\n",
        "\n",
        "## Adding New Columns\n",
        "\n",
        "-   We've seen that you can combine two `df`s together with \\`pd.concat()\\`\n",
        "\n",
        "-   There's a simpler way, though, to add a `.Series()` that should remind you of lists and dicts:\n",
        "\n",
        "``` python\n",
        "df[\"is_extinct\"] = [True, True, True, False]\n",
        "```\n",
        "\n",
        "## Dropping Columns & Rows\n",
        "\n",
        "-   We can drop a `.Series()` with `.drop()`\n",
        "\n",
        "``` python\n",
        "# Drop (returns a new DF unless inplace=True)\n",
        "df_no_family = df.drop(columns=[\"family\"])\n",
        "```\n",
        "\n",
        "-   Or a row with `.drop([#])`\n",
        "\n",
        "``` python\n",
        "# Drop (returns a new DF unless inplace=True) \n",
        "df_no_latin = df.drop([0])\n",
        "```\n",
        "\n",
        "## Renaming Columns\n",
        "\n",
        "-   You can easily rename a column with the `.rename()` method\n",
        "\n",
        "``` python\n",
        "df = df.rename(columns={\"speakers_millions\": \"speakers_M\"})\n",
        "```\n",
        "\n",
        "## (Re)setting Indices\n",
        "\n",
        "-   Or you can drop an index with `.reset_index(drop=True)`\n",
        "\n",
        "    ``` python\n",
        "    df_reset = df.reset_index(drop=True)\n",
        "    df_set = df.set_index(\"language\")\n",
        "    df_set\n",
        "    ```\n",
        "\n",
        "# Filtering, Sorting, Combining\n",
        "\n",
        "## Sorting\n",
        "\n",
        "```python \n",
        "df.sort_values(by=\"speakers_M\", ascending=False) df.sort_index() # by row labels\n",
        "```\n",
        "\n",
        "## Combining Series Side-by-Side\n",
        "\n",
        "``` python\n",
        "reflexes_verb = pd.Series(\n",
        "    {\"Latin\": 8, \"Greek\": 10, \"Sanskrit\": 12, \"Old English\": 6}\n",
        ")\n",
        "reflexes_noun = pd.Series(\n",
        "    {\"Latin\": 5, \"Greek\": 7, \"Gothic\": 4, \"Old Church Slavonic\": 3}\n",
        ")\n",
        "\n",
        "combined = pd.DataFrame({\"verb\": reflexes_verb, \"noun\": reflexes_noun})\n",
        "combined\n",
        "```\n",
        "\n",
        "## Arithmetic with Alignment (fill missing)\n",
        "\n",
        "``` python\n",
        "total = reflexes_verb.add(reflexes_noun, fill_value=0)\n",
        "total.sort_values(ascending=False)\n",
        "```\n",
        "\n",
        "## Concatenation (Stacking)\n",
        "\n",
        "``` python\n",
        "# Vertical stack (same columns)\n",
        "latin_df = pd.DataFrame({\"lang\":[\"Latin\",\"Latin\"],\"root\":[\"fer-\",\"port-\"]})\n",
        "greek_df = pd.DataFrame({\"lang\":[\"Greek\"],\"root\":[\"phér-\"]})\n",
        "pd.concat([latin_df, greek_df], ignore_index=True)\n",
        "```\n",
        "\n",
        "## Handling Missing Data\n",
        "\n",
        "``` python\n",
        "combined.isna().sum()\n",
        "combined_filled = combined.fillna(0)\n",
        "combined_dropped = combined.dropna()\n",
        "```\n",
        "\n",
        "## **Day 2 Activity — Compare Reflex Lists**\n",
        "\n",
        "``` python\n",
        "# 1) Build the two Series (verb/noun) from above\n",
        "# 2) Combine into one DF with columns verb, noun\n",
        "# 3) Add a 'total' column = verb + noun (treat NaN as 0)\n",
        "# 4) Sort by total descending, show top 5\n",
        "```\n",
        "\n",
        "# Activity Answers\n",
        "\n",
        "## Activity: English Vowels\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "eng_vowels = pd.DataFrame({\n",
        "    \"symbol\": [\"i\", \"ɪ\", \"e\", \"ɛ\", \"æ\", \"u\", \"ʊ\", \"o\", \"ɔ\", \"ɑ\", \"ʌ\", \"ə\"],\n",
        "    \"height\": [\"high\", \"high\", \"mid\", \"mid\", \"low\", \"high\", \"high\", \"mid\", \"mid\", \"low\", \"mid\", \"mid\"],\n",
        "    \"backness\": [\"front\", \"front\", \"front\", \"front\", \"front\",\n",
        "                 \"back\", \"back\", \"back\", \"back\", \"back\",\n",
        "                 \"central\", \"central\"],\n",
        "    \"tense\":   [True, False, True, False, False,\n",
        "                True, False, True, False, False,\n",
        "                False, False],\n",
        "    \"rounded\": [False, False, False, False, False,\n",
        "                True, True, True, True, False,\n",
        "                False, False]\n",
        "})\n",
        "```\n",
        "\n",
        "## Activity: English Vowels\n",
        "\n",
        "``` python\n",
        "import pandas as pd\n",
        "\n",
        "# 1. Filter the `df`: show only **high back rounded vowels**\n",
        "eng_vowels[(eng_vowels[\"height\"]==\"high\") & (eng_vowels[\"backness\"]==\"back\") & (eng_vowels[\"rounded\"] == True)]\n",
        "# 2. Negation and slicing: display all vowels that are **not tense**. \n",
        "eng_vowels[~(eng_vowels[\"tense\"]==True)]\n",
        "# 3. Then display only the first three vowels of that group.\n",
        "eng_vowels[~(eng_vowels[\"tense\"]==True)].head(3)\n",
        "# 4. Sort the `df` by **height** and **backness**. \n",
        "eng_vowels.sort_values([\"height\", \"backness\"])\n",
        "# 5. Count how many vowels are rounded, tense or both.\n",
        "rounded = eng_vowels[\"rounded\"].sum()\n",
        "tense = eng_vowels[\"tense\"].sum()\n",
        "both = (eng_vowels[\"rounded\"] & eng_vowels[\"tense\"]).sum()\n",
        "print(\"Rounded:\", rounded, \"| Tense:\", tense, \"| Both:\", both)\n",
        "```"
      ],
      "id": "11f098fc"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\andre\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}