---
title: "Computation for Linguists"
subtitle: "Beginning Python: Pandasmonium, Day 1"
date: "October 13, 2025"
author: "Dr. Andrew M. Byrd"
format:
  revealjs:
    css: header_shrink.css
    theme: beige
    slide-number: true
    center: true
    toc: true
    toc-title: "Plan for the Day"
    toc-depth: 1
jupyter: python3
editor: source
---

# Review

-   What did you learn last time?

## Recap from Last Time

-   Conditionals: `if` = 1 x
-   Loops: `for` = multiple times
-   Cleaning text with `.strip()`, `.lower()`

## Review Activity

1.  Copy the code below.
2.  Use a `for` loop and a conditional to sort each letter of the word "computation" into consonants & vowels.
3.  If the character is a vowel, print "x is a vowel." If it is not a vowel, print "x is not a vowel."

``` python
word = "computation"
vowels = "aeiou"
```

# Setting up Pandas

## Panda Power

-   Python programmers often use **pandas** to sort, create, and analyze tabular data
-   This will allow us to compute data found in spreadsheets, lexica, corpora.
-   Note: **pandas** is built on top of a **NumPy** `array`.
    -   This package allows you to compute high-level mathematical functions
    -   For this reason, you can compute these things within **pandas** as well! (But not quite yet in 301)

## Installing Pandas

To install: - PC:

``` bash
pip install pandas
```

-   Mac:

``` bash
pip3 install pandas
```

## Loading Pandas

-   To run in Python:

``` python
import pandas as pd
```

⚠️ **Avoid file-name shadowing:** Don’t name your scripts `pandas.py`, `re.py`, `random.py`, etc.

# How does Pandas Work?

## What is Pandas?

-   **Pandas**, short for **Panel Data**
-   Allows the manipulation of tables within Python
    -   very similar to a spreadsheet

## Pandas **Series**

-   At the heart of a `pd` `df` (pandas dataframe), are **Series**:
    -   1-D labeled data
    -   a single labeled column or row

``` python
import pandas as pd

langs = pd.Series(["Latin", "Greek", "Sanskrit"], name="language")
langs
```

-   Right now, `name="language"` isn't doing anything, but will later on.

## Pandas **Series**

-   You can give specific labels to the `index` of the **series**

``` python
import pandas as pd

langs = pd.Series(["Latin", "Greek", "Sanskrit", "Finnish"], index=["a","b","c","d"], name="language")
langs
```

## Pandas **Series**

-   `pd.Series()`:

``` python
import pandas as pd

langs = pd.Series(["Latin", "Greek", "Sanskrit", "Finnish"], index=["a","b","c","d"], name="language")
langs
```

-   Are conceptually similar to `dict`:

``` python
langs = {"a": "Latin", "b": "Greek", "c":"Sanskrit", "d":"Finnish"}
```

## Pandas **DataFrames**

-   Pandas `.DataFrame()` is the most popular way to create csv structure in Python

``` python
import pandas as pd

lang_df = pd.DataFrame(langs)
```

## Pandas **DataFrames**

-   You can combine **Series** that share the same index to create a **DataFrame**
-   To do so let's create a second series.
    -   Note the indices!

``` python
import pandas as pd

fam = pd.Series(["Indo-European", "Indo-European", "Indo-European", "Uralic"], index=["a","b","c","d"], name="family")
fam
```

## Pandas **DataFrames**

-   And a third:

``` python
import pandas as pd
speakers = pd.Series([0, 0, 0, 6], index=["a","b","c","d"], name="speakers_millions")
speakers
```

## Pandas **DataFrames**

-   We can combine them all together into a `df`

``` python
import pandas as pd

langs = pd.Series(["Latin", "Greek", "Sanskrit", "Finnish"], index=["a","b","c","d"], name="language")
fam = pd.Series(["Indo-European", "Indo-European", "Indo-European", "Uralic"], index=["a","b","c","d"], name="family")
speakers = pd.Series([0, 0, 0, 6], index=["a","b","c","d"], name="speakers_millions")

languages_df = pd.concat([langs, fam, speakers], axis=1)
print(languages_df)
```

-   What does `axis=1` do?

## Pandas **DataFrames**

-   New method: pd.concat()
    -   *concatenate* `pd` object with other(s) to make a `df`.
-   Try this:

``` python
import pandas as pd

location = pd.Series(["Italy", "Greece", "India", "Finland"], index=["a","b","c","d"], name="location")
new_df = pd.concat([languages_df, location], axis=1)

print(new_df)
```

## Pandas **DataFrames**

-   Or you can just bypass the middle step and create the `df` initially:

``` python
import pandas as pd

fresh_df = pd.DataFrame({
    "language": ["Latin", "Greek", "Sanskrit", "Finnish"],
    "family":   ["Indo-European", "Indo-European", "Indo-European", "Uralic"],
    "speakers_millions": [0, 0, 0, 6],
    "location": ["Italy", "Greece", "India", "Finland"]
})

print(new_df)
```

## Activity

Using Pandas, recreate the following table:

# Going from `[]`/`{}` to `df`

## Building a `df`

-   Let’s practice *building* DataFrames from scratch. We can do this from a `list` or a `dict`.
-   Let's look at how to extract data from a `dict` to convert into a `df`.
-   Our starting point:

``` python
languages = {
    "French": "Romance",
    "Spanish": "Romance",
    "Italian": "Romance",
    "English": "Germanic"
}
```

## Extracting Keys and Values

-   We're going to use the following methods:
    -   `dict.keys()` - access keys
    -   `dict.values()` - access values
-   We can use a **list comprehension** to get what we need.

``` python
lang = [key for key in languages.keys()]
fam = [value for value in languages.values()]
print(lang, fam)
```

## Converting Lists to a Series

``` python
import pandas as pd

langs = pd.Series(lang, name="languages")
fams = pd.Series(fam, name="families")
langs, fams
```

## 

-   Start with a list of languages:

``` python
import pandas as pd

languages = {
    "French": "Romance",
    "Spanish": "Romance",
    "Italian": "Romance",
    "English": "Germanic"
}
lang = [key for key in languages[key]]
```

## 

``` python
families = ["Romance", "Romance", "Romance", "Germanic"]

df = pd.DataFrame({
    "language": langs,
    "family": families
})

print(df)
```

## Inspecting a DataFrame

-   Run this code - what do `.head()`, `.tail()`, `.shape`, `.columns`, and `.index` do?

``` python
df.head()
df.tail(2)
df.shape, df.columns, df.index
df.info()
```

## DF Activity

# Indexing and Selecting

## Selecting Columns

``` python
df["language"]           # Series
df[["language","family"]]# DataFrame (note double brackets)
```

## Accessing Multiple Columns

``` python
```

## Selecting Rows by Integer Position

``` python
df.iloc[0]               # first row
df.iloc[1:3]             # slice rows 1..2
```

## Selecting Rows By Label

``` python
# Rows by label (after we set a custom index)
df2 = df.copy()
df2.index = ["a","b","c","d"]
df2.loc["b"]             # row labeled 'b'
```

## Cell Access (Row + Column)

``` python
df.loc[0, "language"]        # cell by label/column
df.iloc[0, 0]                # cell by position
df.iloc[0:3, 0:2]            # rows 0..2, cols 0..1
```

## Boolean Filtering

``` python
ie = df[df["family"] == "Indo-European"]
ie
```

# Modifying DataFrames

## Adding New Columns

``` python
df["is_extinct"] = [True, False, False, True]
```

## Dropping Columns & Rows

``` python
# Drop (returns a new DF unless inplace=True)
df_no_family = df.drop(columns=["family"])
```

## Renaming Columns

``` python
df = df.rename(columns={"speakers_millions": "speakers_M"})
```

## (Re)setting Indices

``` python
df_reset = df.reset_index(drop=True)
df_set = df.set_index("language")
df_set
```

## **Day 1 Activity — Mini Lexicon**

Create a small lexicon and practice selection & modification.

``` python
lex = pd.DataFrame({
    "Language": ["Latin","Greek","Sanskrit","Old English"],
    "Root": ["fer-","phér-","bhar-","ber-"],
    "Gloss": ["carry","carry","carry","carry"]
})
# Tasks:
# 1) Show only Language + Root
# 2) Add Family = "IE" for all
# 3) Rename Gloss -> Meaning
# 4) Set index to Language, then select the Sanskrit row by label
```

# Activity Answers

## Review Activity

``` python
word = "computation"
vowels = "aeiou"

for c in word:
    if c in vowels:
        print(c, "is a vowel.")
    else:
        print(c, "is not a vowel.")
```
