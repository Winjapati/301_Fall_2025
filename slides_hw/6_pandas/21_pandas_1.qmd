---
title: "Computation for Linguists"
subtitle: "Beginning Python: Pandasmonium, Day 1"
date: "October 13, 2025"
author: "Dr. Andrew M. Byrd"
format:
  revealjs:
    css: header_shrink.css
    theme: beige
    slide-number: true
    center: true
    toc: true
    toc-title: "Plan for the Day"
    toc-depth: 1
jupyter: python3
editor: source
---

# Review

-   What did you learn last time?

## Recap from Last Time

-   Conditionals: `if` = 1 x
-   Loops: `for` = multiple times
-   Cleaning text with `.strip()`, `.lower()`

## Review Activity

1.  Copy the code below.
2.  Use a `for` loop and a conditional to sort each letter of the word "computation" into consonants & vowels.
3.  If the character is a vowel, print "x is a vowel." If it is not a vowel, print "x is not a vowel."

``` python
word = "computation"
vowels = "aeiou"
```

# Setting up Pandas

## Panda Power

-   Python programmers often use **pandas** to sort, create, and analyze tabular data
-   This will allow us to compute data found in spreadsheets, lexica, corpora.
-   Note: **pandas** is built on top of a **NumPy** `array`.
    -   This package allows you to compute high-level mathematical functions
    -   For this reason, you can compute these things within **pandas** as well! (but not just yet)

## Installing Pandas

To install: - PC:

``` bash
pip install pandas
```

-   Mac:

``` bash
pip3 install pandas
```

## Loading Pandas

-   To run in Python:

``` python
import pandas as pd
```

⚠️ **Avoid file-name shadowing:** Don’t name your scripts `pandas.py`, `re.py`, `random.py`, etc.

# How does Pandas Work?

## What is Pandas?

-   **Pandas**, short for **Panel Data**
-   Allows the manipulation of tables within Python
    -   very similar to a spreadsheet

## Pandas **Series**

-   At the heart of a `pd` `df` (pandas dataframe), are **Series**:
    -   1-D labeled data
    -   a single labeled column or row

``` python
import pandas as pd

langs = pd.Series(["Latin", "Greek", "Sanskrit"], name="language")
langs
```

-   Right now, `name="language"` isn't doing anything, but will later on.

## Pandas **Series**

-   You can give specific labels to the `index` of the **series**

``` python
import pandas as pd

langs = pd.Series(["Latin", "Greek", "Sanskrit", "Finnish"], index=["a","b","c","d"], name="language")
langs
```

## Pandas **Series**

-   `pd.Series()`:

``` python
import pandas as pd

langs = pd.Series(["Latin", "Greek", "Sanskrit", "Finnish"], index=["a","b","c","d"], name="language")
langs
```

-   Are conceptually similar to `dict`:

``` python
langs = {"a": "Latin", "b": "Greek", "c":"Sanskrit", "d":"Finnish"}
```

## Pandas **DataFrames**

-   Pandas `.DataFrame()` is the most popular way to create csv structure in Python

``` python
import pandas as pd

lang_df = pd.DataFrame(langs)
```

## Pandas **DataFrames**

-   You can combine **Series** that share the same index to create a **DataFrame**
-   To do so let's create a second series.
    -   Note the indices!

``` python
import pandas as pd

fam = pd.Series(["Indo-European", "Indo-European", "Indo-European", "Uralic"], index=["a","b","c","d"], name="family")
fam
```

## Pandas **DataFrames**

-   And a third:

``` python
import pandas as pd
speakers = pd.Series([0, 0, 0, 6], index=["a","b","c","d"], name="speakers_millions")
speakers
```

## Pandas **DataFrames**

-   We can combine them all together into a `df`

``` python
import pandas as pd

langs = pd.Series(["Latin", "Greek", "Sanskrit", "Finnish"], index=["a","b","c","d"], name="language")
fam = pd.Series(["Indo-European", "Indo-European", "Indo-European", "Uralic"], index=["a","b","c","d"], name="family")
speakers = pd.Series([0, 0, 0, 6], index=["a","b","c","d"], name="speakers_millions")

languages_df = pd.concat([langs, fam, speakers], axis=1)
print(languages_df)
```

-   What does `axis=1` do?

## Pandas **DataFrames**

-   New method: pd.concat()
    -   *concatenate* `pd` object with other(s) to make a `df`.
-   Try this:

``` python
import pandas as pd

location = pd.Series(["Italy", "Greece", "India", "Finland"], index=["a","b","c","d"], name="location")
new_df = pd.concat([languages_df, location], axis=1)

print(new_df)
```

## Pandas **DataFrames**

-   Or you can just bypass the middle step and create the `df` initially:

``` python
import pandas as pd

fresh_df = pd.DataFrame({
    "language": ["Latin", "Greek", "Sanskrit", "Finnish"],
    "family":   ["Indo-European", "Indo-European", "Indo-European", "Uralic"],
    "speakers_millions": [0, 0, 0, 6],
    "location": ["Italy", "Greece", "India", "Finland"]
}, index=["a","b","c","d"])

print(new_df)
```

## Pandas Activity: Phonemic Inventory

Using Pandas, recreate the following table:

|     | voicing   | place    | manner    |
|-----|-----------|----------|-----------|
| /p/ | voiceless | bilabial | stop      |
| /b/ | voiced    | bilabial | stop      |
| /t/ | voiceless | alveolar | stop      |
| /d/ | voiced    | alveolar | stop      |
| /s/ | voiceless | alveolar | fricative |
| /h/ | voiceless | glottal  | fricative |

# Going from `[]`/`{}` to `df`

## Converting Lists to a Series

- If you think about it, a list is just a single column of a `.DataFrame()`
- And for this reason, it's super easy to convert it to a `.Series()`

```python
import pandas as pd

gettysburg = ["Four", "score", "and", "seven", "years", "ago"]
getty = pd.Series(gettysburg)

print(getty)
```

## Converting Dictionaries to a Series

- How would we convert a `dict` to a `.DataFrame()`?
``` python
languages = {
    "French": "Romance",
    "Spanish": "Romance",
    "Italian": "Romance",
    "English": "Germanic"
}
```


## Activity



## Extracting Keys and Values

-   We're going to use the following methods:
    -   `dict.keys()` - access keys
    -   `dict.values()` - access values
-   We can use a **list comprehension** to get what we need.

``` python
lang = [key for key in languages.keys()]
fam = [value for value in languages.values()]
print(lang, fam)
```


##

``` python
import pandas as pd

langs = pd.Series(lang, name="languages")
fams = pd.Series(fam, name="families")
langs, fams
```

## Keys & Values as Separate Columns

-   Start with a list of languages:

``` python
import pandas as pd

languages = {
    "French": "Romance",
    "Spanish": "Romance",
    "Italian": "Romance",
    "English": "Germanic"
}
lang_df = pd.DataFrame(list(languages.items()), columns=["Language", "Family"])
print(lang_df)
```

## If you want the Key as the Index

```python
import pandas as pd

languages = {
    "French": "Romance",
    "Spanish": "Romance",
    "Italian": "Romance",
    "English": "Germanic"
}

lang_df = pd.DataFrame.from_dict(languages, orient="index", columns=["Family"])
print(lang_df)
```

## 

``` python



print(df)
```

## Inspecting a DataFrame

-   Run this code - what do `.head()`, `.tail()`, `.shape`, `.columns`, and `.index` do?

``` python
df.head()
df.tail(2)
df.shape, df.columns, df.index
df.info()
```

## DF Activity


# Activity Answers

## Review Activity

``` python
word = "computation"
vowels = "aeiou"

for c in word:
    if c in vowels:
        print(c, "is a vowel.")
    else:
        print(c, "is not a vowel.")
```

## Phonemic Inventory Pandas Activity

``` python
import pandas as pd

phon_inv = pd.DataFrame({
    "voicing": ["voiceless", "voiced", "voiceless", "voiced", "voiceless", "voiceless"],
    "place": ["bilabial", "bilabial", "alveolar", "alveolar", "alveolar", "glottal"], 
    "manner": ["stop", "stop", "stop", "stop", "fricative", "fricative"]},
    index=["p","b","t","d","s","h"])

print(phon_inv)
```

## 