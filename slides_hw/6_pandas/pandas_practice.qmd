---
title: "pandas_practice"
format: html
---

```{python}
import pandas as pd

df = pd.DataFrame({
    "language": ["Latin", "Greek", "Sanskrit", "Finnish"],
    "family":   ["Indo-European", "Indo-European", "Indo-European", "Uralic"],
    "speakers_millions": [0, 0, 0, 6],
    "location": ["Italy", "Greece", "India", "Finland"]
})

print(df)
```

```{python}
df["is_extinct"] = [True, True, True, False]
df
```

```{python}
# Drop (returns a new DF unless inplace=True)
df_no_family = df.drop(columns=["family"])
df_no_family
```

```{python}
# Drop (returns a new DF unless inplace=True) 
df_no_latin = df.drop([0])
df_no_latin
```

```{python}
df = df.rename(columns={"speakers_millions": "speakers_M"})
df
```

```{python}
df_reset_no_latin = df_no_latin.reset_index(drop=True)
df_reset_no_latin

df_reset = df.reset_index(drop=True)
df_reset

df_set = df.set_index("language")
df_set
```

```{python}
import pandas as pd

df = pd.DataFrame({
    "language": ["Latin", "Greek", "Sanskrit", "Finnish"],
    "family":   ["Indo-European", "Indo-European", "Indo-European", "Uralic"],
    "speakers_M": [0, 0, 0, 6],
    "location": ["Italy", "Greece", "India", "Finland"]
})

df.sort_index() # by row labels
print("-----------------------------------------------")
df.sort_values(by="location", ascending=True)
print("-----------------------------------------------")

```

```{python}
reflexes_verb = pd.Series(
    {"Latin": 8, "Greek": 10, "Sanskrit": 12, "Old English": 6}
)
reflexes_noun = pd.Series(
    {"Latin": 5, "Greek": 7, "Gothic": 4, "Old Church Slavonic": 3}
)

combined = pd.DataFrame({"verb": reflexes_verb, "noun": reflexes_noun})
combined
```

```{python}
total = reflexes_verb.add(reflexes_noun, fill_value=0)
total.sort_values(ascending=False)
```

```{python}
combined.isna().sum()
combined_filled = combined.fillna(0)
combined_dropped = combined.dropna()

combined
combined_filled
combined_dropped
```

```{python}
total = reflexes_verb.add(reflexes_noun, fill_value=0)
total.sort_values(ascending=False)
```

```{python}
import pandas as pd

sound_df = pd.DataFrame({
    "s": [35, 28, 40],
    "z": [20, 25, 18],
    "t": [50, 40, 53],
    "k": [42, 35, 48],
    "m": [18, 12, 17],
    "n": [22, 20, 19],
})

total_c = sound_df["s"].add(sound_df["z"]).add(sound_df["t"]).add(sound_df["k"]).add(sound_df["m"]).add(sound_df["n"])
#total_fric = sound_df["s"].add(sound_df["z"])
# total_nas = 
# total_obs = 
```

```{python}
import pandas as pd

sound_df = pd.DataFrame({
    "s": [35, 28, 40],
    "z": [20, 25, 18],
    "t": [50, 40, 53],
    "k": [42, 35, 48],
    "m": [18, 12, 17],
    "n": [22, 20, 19],
})

sound_comb = sound_df.sum(axis=0)
sound_comb

for c in sound_comb:
    if sound_comb["s" or "z" in sound_comb.items():
      print(c)
# total_fric = sound_comb["s"].add(sound_comb["z"])
```

```{python}
name = "Bob, Susie, Jimbo"
prof = "teacher, doctor, lawyer"
age = "45, 63, 119"
```

```{python}
name_split = name.split(",")
prof_split = prof.split(",")
age_split = age.split(",")
```

```{python}
import pandas as pd

recap_df = pd.DataFrame([prof_split, age_split], columns=name_split)
print(recap_df)
```
