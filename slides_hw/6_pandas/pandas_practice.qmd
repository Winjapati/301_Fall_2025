---
title: "pandas_practice"
format: html
---

```{python}
import pandas as pd

df = pd.DataFrame({
    "language": ["Latin", "Greek", "Sanskrit", "Finnish"],
    "family":   ["Indo-European", "Indo-European", "Indo-European", "Uralic"],
    "speakers_millions": [0, 0, 0, 6],
    "location": ["Italy", "Greece", "India", "Finland"]
})

print(df)
```

```{python}
df["language"]           # Series
df[["language","family"]]# DataFrame (note double brackets)
```

```{python}
df.iloc[0]               # first row
df.iloc[1:3]             # slice rows 1..2
```

```{python}
# Rows by label (after we set a custom index)
df2 = df.copy()
df2.index = ["a","b","c","d"]
df2.loc["b"]             # row labeled 'b'
```

```{python}
df.loc[0, "language"]        # cell by label/column
df.iloc[0, 0]                # cell by position
df.iloc[0:3, 0:2]            # rows 0..2, cols 0..1
```

```{python}
ie = df[df["family"] == "Indo-European"]
ie
```

```{python}
df[(df["family"]=="Indo-European") & (df["location"]=="India")]
df[(df["family"]=="Indo-European") | (df["location"]=="Finland")]
```

```{python}
df[~(df["family"]=="Indo-European")]
```

```{python}
df.sort_values(["location"])
```

```{python}
df["speakers_millions"].sum()
```

```{python}
int(df["speakers_millions"].sum())
```

```{python}
import pandas as pd

eng_vowels = pd.DataFrame({
    "symbol": ["i", "ɪ", "e", "ɛ", "æ", "u", "ʊ", "o", "ɔ", "ɑ", "ʌ", "ə"],
    "height": ["high", "high", "mid", "mid", "low", "high", "high", "mid", "mid", "low", "mid", "mid"],
    "backness": ["front", "front", "front", "front", "front",
                 "back", "back", "back", "back", "back",
                 "central", "central"],
    "tense":   [True, False, True, False, False,
                True, False, True, False, False,
                False, False],
    "rounded": [False, False, False, False, False,
                True, True, True, True, False,
                False, False]
})

eng_vowels

```

```{python}
import pandas as pd

# 1. Filter the `df`: show only **high back rounded vowels**
eng_vowels[(eng_vowels["height"]=="high") & (eng_vowels["backness"]=="back") & (eng_vowels["rounded"] == True)]
# 2. Negation and slicing: display all vowels that are **not tense**. 
eng_vowels[~(eng_vowels["tense"]==True)]
# 3. Then display only the first three vowels of that group.
eng_vowels[~(eng_vowels["tense"]==True)].head(3)
# 4. Sort the `df` by **height** and **backness**. 
eng_vowels.sort_values(["height", "backness"])
# 5. Count how many vowels are rounded, tense or both.
rounded = eng_vowels["rounded"].sum()
tense = eng_vowels["tense"].sum()
both = (eng_vowels["rounded"] & eng_vowels["tense"]).sum()
print("Rounded:", rounded, "| Tense:", tense, "| Both:", both)
```

```{python}
import pandas as pd

df = pd.DataFrame({
    "language": ["Latin", "Greek", "Sanskrit", "Finnish"],
    "family":   ["Indo-European", "Indo-European", "Indo-European", "Uralic"],
    "speakers_millions": [0, 0, 0, 6],
    "location": ["Italy", "Greece", "India", "Finland"]
})

df["is_extinct"] = [True, True, True, False]

df.head()

```

```{python}
# Drop (returns a new DF unless inplace=True)
df_no_family = df.drop([1])

df = df.rename(columns={"speakers_millions": "speakers_M"})

df_no_family.head()
```

```{python}
# df_reset = df.reset_index(drop=True)
df_set = df.set_index("language")
df_set
```

```{python}
reflexes_verb = pd.Series(
    {"Latin": 8, "Greek": 10, "Sanskrit": 12, "Old English": 6}
)
reflexes_noun = pd.Series(
    {"Latin": 5, "Greek": 7, "Gothic": 4, "Old Church Slavonic": 3}
)

combined = pd.DataFrame({"verb": reflexes_verb, "noun": reflexes_noun})
combined
```

```{python}
total = reflexes_verb.add(reflexes_noun, fill_value=0)
total.sort_values(ascending=False)
```

```{python}
# Vertical stack (same columns)
latin_df = pd.DataFrame({"lang":["Latin","Latin"],"root":["fer-","port-"]})
greek_df = pd.DataFrame({"lang":["Greek"],"root":["phér-"]})
pd.concat([latin_df, greek_df], ignore_index=True)
```

```{python}
combined.isna().sum()
combined_filled = combined.fillna(0)
combined_dropped = combined.dropna()
combined_dropped.head()
```

```{python}

words = ["the", "the", "the", "boy", "boy", "dog", "dog", "cat"]

word_counts = {}


for wd in words:
    word_counts[wd] = word_counts.get(wd, 0) + 1
    
print(word_counts)

```
