Directory Structure
There has recently been an uptick in discussion among college professors that students are less familiar with the notions of files, folders, directories, and pathsLinks to an external site. than they used to be in the past. This is in part a natural consequence of shifting paradigms in computer use. Many people are exclusively using online services like Google Docs, and don't save files to their computers ever. And even when we do save files on out computer, many operating systems have search based approaches to finding files.

The problem for scientific computing purposes, or even just making some simple HTML pages on your local computer, is that you need to be able to navigate the hierarchical file system of your computer, in order to tell your programs how to navigate it.

Step 1: Files in Folders
The first thing to be clear about is that all files you've saved on your computer are in a folder (a.k.a. a directory). "Documents" or "My Documents" is a folder. Even your Desktop is a folder. This is true for both macOS and Windows. For example, I have an account on my laptop called "Display" for when I want to show how my computer works without showing everyone all of my personal files. In the Display account, I saved a little text file called Sampletext.txt to the desktop. In this screenshot, you can see Sampletext.txt shown both on my desktop, and as a file in a folder.

Desktop.png

What's nice about this image is that you can see where Sampletext.txt exists in the context of my whole hard drive. My "Desktop" is just a folder that my computer shows the content of on my main screen. The Desktop folder is inside of a folder called "Display". There are other folders in there, including my main user account, joseffruehwald. All of these folders are grouped together in the "Users" folder, and the "Users" folder is one of the first folders immediately underneath my hard drive.

The important thing to keep in mind here is that all files, programs, photos, etc are stored somewhere in a folder, inside of another folder, probably inside of another folder. You might not always interact with the files this way, and they might not always look like they're in a folder, but they are.

Viewing the folder hierarchy on a Mac
To be able to better view the full hierarchy of folders on a Mac, I would recommend the following:

Open Finder, and in the View menu, select "as Columns"
Under the View menu again, select "Show Path Bar"
Viewing the folder hierarchy in Windows
At the top of the file browser on Windows, you'll see the sequence of files in which the current folder is embedded.

VirtualDen_Desktop.png

Giving Directions to Programs
Programs are going to need directions for where to find things, and we can do this with "paths". The concept of a path is so important, I'm going to really emphasize it

"paths" 

The "path" to a file is a written instruction for where to find a file on your specific computer.

Relative Paths
Sometimes, we only need to tell a file where another file is relative to itself. For example, here is an HTML document and a CSS stylesheet for that document.

html_practice.png

From site.html to style.css: style.css

Because style.css is in the same folder as site.html, we only need to tell site.html to look for style.css, like so

<link rel="stylesheet" type="text/css" href="style.css">
Just telling the html file to look for "style.css", it's going to look inside of, and only inside of the same folder as itself. 

However, sometimes people like to put all of the stylesheets and images for a website inside of a folder called "assets," like so:

assets.png

From site.html to style.css: assets/style.css

Now, if we tell site.html just to look for style.css, it's not going to find it anymore! That's because style.css is no longer in the same folder as site.html. We'll need to update the link to the stylesheet to reflect the fact that it's now in a different folder, like so:

<link rel="stylesheet" type="text/css" href="assets/style.css">
Here's how site.html interprets the string assets/style.css:

Look inside the folder you're currently in for a folder called assets
Then, look inside of that folder for a file called style.css
We could take it a step further, and create a new folder called "css" inside of "assets", and put our stylesheet there instead.

css.png

From site.html to style.css: assets/css/style.css

Now, we'd need to update the link to the stylesheet to look like this

<link rel="stylesheet" type="text/css" href="assets/css/style.css">
Again, breaking this down into how site.html interprets the string assets/css/style.css goes like this:

Look inside of the same folder as yourself for a folder called assets
Look inside of that folder for a folder called css
Look inside of that folder for a file called style.css
Absolute Paths
Relative paths define the location of a file relative to another file, usually the one you're writing. However, we can also define the location of a file on our computer that will work no matter where we're looking from. These are called "absolute paths." Put simply, absolute paths just list all of the nested folders a file is in, all the way up to the hard drive. You can see the absolute path for style.css at the bottom of the very last screen shot.

Different operating systems have different short hands for describing the top level, or hard drive level, of the path. On macOS, it's simply a / at the beginning of the path. On Windows, it usually begins with C:\. For the final location of style.css in the screenshot above, the absolute path would be.

/Users/Display/Documents/html_practice/assets/css/style.css
If for some reason I didn't want to move or copy this stylesheet from this location, and I wanted to link to it from an HTML file saved in some completely different location on my laptop, I could give it this absolute path, and it would find it.

Important Note on Naming
From here on out in the course, you should avoid using spaces in any of the files or folders you name. While you can take spaces into account when giving a path, it's annoying. Instead, I'd recommend using an underscore _, a dash -, or naming files with "camel case".

my_file.txt
my-file.txt
myFile.txt
Important Note on Using Paths
There are two crucial things to remember about using paths that can be conceptually difficult when first getting started.

Relative paths always depend on where you're coming from and where you're going to. If either my HTML file was in a location I was confused about, or my CSS file was in a location I was confused about, my relative path might not work.
Both relative paths and absolute paths depend on how files are organized inside of your own computer. A path copied from an example online, or a professor's template might not work  if your file structure is different.\

Command Line Interface
Some of what we'll be doing in class will involve interacting with your computer through a "Command Line Interface." Command line interacts are purely text based way to interact with your computer. It's your same exact computer, just a different way of using it without using icons, or clicking. 

macOS
In macOS, we can access a command line interface using the program Terminal. You can find Terminal in your Applications inside the folder called Utilities, or just by typing in "Terminal" into Spotlight search.

Windows
For now, on Windows, I'd recommend using PowerShell. You can launch PowerShell by searching for it in the Start menu.

Getting your Bearings
When you first launch your command line interface, it will look something like this:

Display_—_-zsh_—_72×22.png

This is obviously scary looking, and it doesn't give you much hint as to what to do next. The important to thing to keep in mind is that while you are using the command line interface you are inside of a folder. There are two commands I recommend using over and over again to figure out where you are, and where you can go.

"The Prompt"
We call the the space waiting for us to type in something the "prompt". It usually has a symbol before it. Depending on your system, it might be any of the following: $, %, or >. If you type something in here, your computer will interpret it as a command, and try to run it. 

pwd
If you type in pwd into the terminal and hit enter, it will print out the absolute path to where you currently are. When you first launch a terminal, it usually starts you off in your home directory, which is usually going to be named after your username.

Here's how it prints out on my own computer when I first launch Terminal.

% pwd
/Users/Display
Use pwd early, and use it often. It stands for present working directory. 

ls
If you type in ls into the terminal and hit enter, it will print out a list of all of the directories and files inside the folder you are currently in. Here's how it prints out on my own computer when I first launch Terminal:

% ls
Desktop      Library    Pictures
Documents    Movies     Public
Downloads    Music      Sites    
Each of the items listed here is another directory inside of my current directory. I can look inside and get a list of all the files inside of these directories by typing in ls and the name of the directory I want to see inside of. For example, if I wanted to get a list of all of the files on my desktop, this is what I would type:

% ls Desktop
Sampletext.txt
I only have one file on my desktop right now, and it's a document called Sampletext.txt. 

Know your surroundings
Really skilled and accomplished programmers use the commands pwd and ls constantly, and so should you! It's the only way to keep track of your surroundings on the command line. 

If you ever are looking at a terminal, and don't know what to do next, just type in pwd and ls. 

Every time you do a new thing in the terminal, type in type in pwd and ls afterwards.

Just type in pwd and ls all the time.

Getting around
You're not always going to want to hang around in your home directory the whole time. You may want to get to a specific directory where some code or a script is to run it. To do this, we use the cd command, which stands for change directory.

Moving down 1 level
To change the folder you're in, you just need to type in cd and then the name of the folder. For example to move from my home directory into my Documents folder, it would look like this:

% ls
Desktop     Library   Pictures
Documents   Movies    Public
Downloads   Music     Sites
% cd Documents
% ls
FranklinInstituteSamples.pptx   Zoom
FranklinInstituteSounds         html_practice
Microsoft User Data
% pwd
% /Users/Display/Documents
First, I double checked which directories were in the folder I was currently in with ls.
Second, I moved into the Documents directory with cd Documents.
Third, I checked what files and directories were in my new location with ls.
Fourth, I double checked my current location with pwd, which gave my the absolute path to where I was.
Moving up 1 level
If after moving into my documents folder, I wanted to move back to my home directory, that would involve moving up one level, because my Documents folder is inside of my home directory. We can do this using cd again, but instead of the name of a directory, we follow it with ... The two dots, .., is a short hand for "one level up from where I am." Here's how that works out on my system.

% pwd
/Users/Display/Documents
% cd ..
% pwd
/Users/Display
First, I double checked where I was with pwd.
Second, I moved up one level with cd ..
Third, I double checked where I would up with pwd again, confirming that I was now in my home directory again.
Moving down multiple levels
You don't have to move down just one level at a time. For example, right now we're in my home directory, but inside of my documents there's a directory called html_practice. That's two levels down. To get into html_practice, I just need to enter cd followed by the relative path to it. Remember, the relative path is the sequence of directory names that lie between where we are and where we want to go. Here's how that looks on my system.

% pwd
/Users/Display
% cd Documents/html_practice
% pwd
/Users/Display/Documents/html_practice
% ls
site.html  style.css
First, I double checked my location with pwd
Second, I moved down two levels through Documents into html_practice with cd.
Third, I double checked where I had moved to with pwd.
Lastly, I checked what files were in my new directory with ls.
Moving up and over
Now, we're inside html_practice which is inside Documents. But what if we wanted to move into another directory that is also inside of Documents. For example, the directory Zoom is also inside of Documents, which is where Zoom saves all of the chat logs from our class meetings.

html_practice-1.png

We could do this in a two step process, using cd .. to move up one level, then cd Zoom to move into the zoom directory. But we can also combine the two into one step.

% pwd
/Users/Display/Documents/html_practice
% cd ../Zoom
% pwd
/Users/Display/Documents/Zoom
First, I double checked where I was with pwd.
Then, I moved up into Documents and down into Zoom in one go with cd ../Zoom
Finally, I double checked where I wound up with pwd.
Very useful tips!
There are a few tips, tricks, and shortcuts that can make using the command line a little bit easier.

Tab autocomplete
When using a command line interface, "tab autocomplete" is a crucial tool to help you get around. For example, if you are in your home directory and you want to move into your documents directory, all you really need to type is cd Doc and the terminal should autocomplete the rest of the file name! 

If you have multiple directories that start with Doc, it will list all of them, and then you'll only need to type in a few more characters before it will be able to autocomplete. 

Tab autocomplete works for ls as well, which can let you explore through directories without needing to move around.

Get back home!
Technically, your home directory is a directory with a long absolute path. But because it's a directory you'll probably want to keep getting back to often, there's a shortcut built in. If you run cd ~, it will zip you back to your home directory from wherever you are.

Absolute paths
If, for some reason, you don't know what the relative path is to a directory you want to get to from where you are (or maybe it's very complicated), you can always run cd followed by the absolute path to where you want to go.

This is all going to matter a lot
Using the command line and navigating your computer is going to come up a lot more in this course. You should try as much as you can to get a handle on how this all works now.




