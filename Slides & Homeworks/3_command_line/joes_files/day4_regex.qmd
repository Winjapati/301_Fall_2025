---
title: "Day 4 — Intro to Regular Expressions (Regex)"
format: revealjs
---

# Why regex?
- Computers do exactly what you say (too literal)
- Regex = **patterns** for precise search
- Works in CLI, Python (`re`), R, VS Code, etc.

---

# The “bear” problem
```bash
grep "bear" grimm.txt
```
- Matches `bear` ✅
- Also matches `beard` ❌ (substring)

**Fix with word boundaries**:
```bash
egrep "\b[Bb]ear\b" grimm.txt
```

---

# Options & ranges
- `[Bb]ear` → `Bear` or `bear`
- `[a-g]ear` → `aear`…`gear`
- `[0-9]` → any digit
- `[a-zA-Z]{3}` → exactly 3 letters

---

# Quantifiers
- `+` → one or more
- `*` → zero or more
- `?` → optional
- `{n}` → exactly n times

Examples:
```bash
egrep -o "\b\w{3}\b" grimm.txt | wc -l     # count 3-letter words
egrep -o "\bthe \w+ man\b" grimm.txt       # “the X man”
egrep -o "\bthe (\w+\s)?man\b" grimm.txt   # “the man” or “the X man”
```

---

# Variants & spelling
- Optional letter with `?`:
```bash
egrep --color=auto "favou?r" *
```
Matches **favor**/**favour** in mixed corpora.

---

# Whitespace & shortcuts
- `\b` word boundary
- `\s` any whitespace (space/tab/newline/CR)
- `\d` digit (`[0-9]`)
- `\w` word char (`[A-Za-z0-9_]`)

---

# Mini-lab (8–12 min)
1) **Word-length distribution** (Grimm)
```bash
egrep -o "\b\w{1}\b" grimm.txt | wc -l
egrep -o "\b\w{2}\b" grimm.txt | wc -l
egrep -o "\b\w{3}\b" grimm.txt | wc -l
# … continue up to 10
```

2) **ID pattern** (LinkBlue-like)
- Three or four letters, then three digits:
```
[a-zA-Z]{3,4}\d{3}
```

---

# Python bridge (parity check)
Shell:
```bash
egrep "\bbear\b" grimm.txt | wc -l
```

Python:
```python
import re, pathlib
text = pathlib.Path("grimm.txt").read_text(encoding="utf-8", errors="ignore")
len(re.findall(r"\bbear\b", text))
```
