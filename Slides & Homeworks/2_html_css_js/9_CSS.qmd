---
title: "Computation for Linguists"
subtitle: "HTML and Javascript, Day 3: CSS"
date: "September 15, 2025"
author: "Dr. Andrew M. Byrd"
format:
  revealjs:
    css: header_shrink.css
    theme: beige
    slide-number: true
    center: true
    toc: true
    toc-title: "Plan for the Day"
    toc-depth: 1
editor: visual
---

# Review

-   What did you learn last time about HTML?

## Review from Days 1 & 2

-   Day 1:

    -   We learned **basic tags**: `<h1>`, `<p>`, `<em>`, `<strong>`, `<a>`, `<img>`, `<ul>`, `<li>`
    -   We practiced **attributes** like `href` and `alt`

-   Day 2:

    -   Structure!

-   We built a simple page with our name, a paragraph, a link, an image, and a list, and then structured it.

# Let's Make Things Pretty

## What is CSS?

-   There is a default way that text is displayed on a website: size of H1, organization of lists, etc.
-   Cascading Style Sheets (CSS) allow us to make websites more interesting
    -   Change the color and size of text, such as headings and links
    -   Create layouts to organize content, create multi-column texts or organizing your site in a specific way
    -   Create animations
-   The following exercises are taken from [here](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/)

## CSS syntax basics

-   Open up `firstname_lastname.html`
-   Right after `<html>`, paste:

``` html
<head>
<style>
body {
  background-color: lightblue;
}
</style>
</head>
```

## Let's add this to the `<style>` section.

``` html
p {
  text-align: center;
  color: red;
} 
```

## Let's add this to the `<style>` section.

``` html
p {
  color: aqua;
  padding: 5px;
  background: midnightblue;
}
```

## Creating a `.css` file

-   We don't *have* to put the `<style` code in the `<head>`, though
-   We can put it in a `.css` file.
    -   Why would we want to do that?
-   Let's now create a new file, called `styles.css`.

## Creating a `.css` file

-   Let's paste this code into the `.css` file.

``` html
body {
  background-color: lightblue;
}
p {
  text-align: center;
  color: red;
  padding: 5px;
  background: midnightblue;
}
```

# Beautifying Stinky's

## Remember Stinky's?

-   Last time you built a website for The Stinky Cheesemonger.
-   It was fairly basic, but we were able to add some structural features to it.
-   If you'll recall, it looked something like <a href="8_stinkys.html">this</a>

## Stinky's, Beautified

-   Let's look at our website, beautified.
-   It's change in look is dictated by a `.css` file
-   How can we see this on websites?
    -   Dev tools!

## Dev Tools

-   `F12`
-   `Ctrl/Command` + `Shift` + `i`

## Activity: Deciphering CSS code

-   Inspect the style file, `9_stinky_style.css`
-   How do you:
    -   Make a comment in CSS?
    -   

## Today’s Goal

-   Learn to read a real CSS file (Stinky’s Cheesemonger stylesheet)\
-   Understand new terms like *selector*, *variable*, *pseudo-class*\
-   See how properties and values work together\
-   Practice changing variables and properties to see effects

------------------------------------------------------------------------

## Unfamiliar Terminology

-   **Selector** → which part of the page you want to style (`body`, `p`, `#about`)\
-   **Declaration block** → the `{ … }` after a selector\
-   **Property** → what you want to change (`color`, `margin`)\
-   **Value** → how you want it to look (`black`, `1rem`)\
-   **Variable (custom property)** → a nickname for a value, written as `--name: value;`\
-   **Pseudo-class** → special states, like `a:hover` (when mouse is over a link)

------------------------------------------------------------------------

## More Unfamiliar Terms

-   **Units**
    -   `rem` = relative to root font size (scales with user settings)\
    -   `ch` = width of one character (good for readable line length)\
-   **Sticky header**
    -   `position: sticky; top: 0;` keeps header visible while scrolling\
-   **Flexbox**
    -   `display: flex; gap: …; justify-content: center;` arranges items in a row

## More Unfamiliar Terms

-   **:last-child**
    -   Styles only the last element in a group\
-   **rgba()**
    -   Colors with transparency, e.g., `rgba(0,0,0,0.15)`\
-   **calc()**
    -   Lets you do math with CSS values

------------------------------------------------------------------------

## CSS Variables

-   Defined in :root so they apply everywhere
-   Reusable nicknames for colors, spacing, sizes
-   Change it once → updates everywhere

``` css
:root {
  --ink: black;        /* variable definition */
  --paper: oldlace;
}

body {
  color: var(--ink);   /* using the variable */
  background: var(--paper);
}
```

## Why Variables?

-   Without variables:

``` css
body   { color: black; }
h1     { color: black; }
footer { color: black; }
```

-   With variables:

``` css
:root { --ink: black; }

body   { color: var(--ink); }
h1     { color: var(--ink); }
footer { color: var(--ink); }
```

-   Easier to update: change `--ink` once and the whole site updates

## Selectors

``` css
p {
  color: red;
  font-size: 1.2rem;
}
```

-   p = selector (targets all `<p>` elements)
    -   Inside { … } are **declarations**:
    -   color = **property**
    -   red = **value**
-   Grammar:

``` css
selector { property: value; property: value; }
```

## Different Kinds of Selectors

-   Element selector: p { … } → all paragraphs
-   Class selector: .highlight { … } → anything with class="highlight"
-   ID selector: #cheeses { … } → the element with id="cheeses"
-   Pseudo-class: a:hover { … } → links when hovered

# Activity: Beautifying Your Site
